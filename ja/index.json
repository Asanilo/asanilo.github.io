






[{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/tags/blog/","section":"标签","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/series/blogbuild/","section":"Series","summary":"","title":"BlogBuild","type":"series"},{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/tags/hugo%E7%AC%94%E8%AE%B0/","section":"标签","summary":"","title":"Hugo笔记","type":"tags"},{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/tags/obsidian%E7%AC%94%E8%AE%B0/","section":"标签","summary":"","title":"Obsidian笔记","type":"tags"},{"content":" 一、导出插件选择与对比 # 我一直习惯在独立的随笔仓库里敲笔记 \u0026mdash;\u0026mdash; 毕竟写东西时总不想被 Hugo 的目录结构束缚，所以 \u0026ldquo;把笔记转成 Hugo 能认的格式\u0026rdquo; 就成了刚需。试了三款插件后，终于摸清了它们的脾气：\n1. enhancing-export（优先推荐） # 核心优势：转换后的 MathJax 公式格式最美观，无需复杂配置即可满足渲染需求；\n初期问题：初期未发现该插件与custom-attachment-location插件存在冲突，导致图片无法正常上传，一度认为实用性较低（冲突解决方案见 链接：冲突解决）；\n最终定位：解决冲突后，成为当前最优导出选择。 #### 2. hugo publish（备选方案）\n核心优势：提供快捷导出按钮，操作便捷性较高；\n明显不足：输出的 MathJax 公式需额外配置extend-footer、param、makeup等 TOML 文件，且全局开启 MathJax 会耗费性能，最终公式格式仅能满足基础需求，表现欠佳。 #### 3. Sync to Hugo、 Static Site MD Exporter\n功能定位：仅实现 Markdown 文件的存储位置迁移，无格式优化能力；\n适用场景：仅推荐直接在 Hugo Site 目录下撰写笔记的用户使用，对独立随笔仓库用户几乎无价值。\n二、Hugopreview 插件评价：能用但没必要 # 核心价值：提供基础的 Hugo 预览功能，但便捷性提升有限；\n使用限制：需在 Hugo Site 目录下才能生效；\n替代方案：Obsidian 核心插件已支持直接通过浏览器预览笔记，无需额外依赖该插件。\n三、enhancing-export 插件体验优化 # 通过以下配置，可实现与 hugo publish 插件同等甚至更便捷的导出操作：\n导出逻辑参考：Hugo叶页面导出实现记录\n快捷命令配置：使用 Commander 插件记录「导出为 Hugo Markdown」命令，操作路径可视化如下：\nfile-Obsidian联动hugo1.png 最终效果：配置完成后可一键导出兼容 Hugo 的笔记，操作便捷性与 hugo publish 持平，效果如下： file-Obsidian联动hugo2.png ","date":"2025-10-15","externalUrl":null,"permalink":"/posts/obsidian-hugo-integration/","section":"文章","summary":"","title":"Obsidian联动hugo","type":"posts"},{"content":"模拟信号的数字编码PPT\n本章核心框架 # 核心流程：模拟信号 → 抽样 → 量化 → 编码（数字信号） 关键技术：抽样定理、量化方法（均匀/非均匀）、编码调制（PCM/DPCM/ΔM）、误码性能优化 核心目标：在保证信号质量的前提下，实现高效的模拟-数字转换与传输 file-转换测试.png 3.1 引言 # 3.1.1 数字编码的必要性 # 模拟信号的数字编码是连接模拟世界与数字系统的唯一桥梁，原因如下：\n现代信息系统（计算机、互联网、云存储、智能手机）均基于数字技术构建 模拟信号无法直接适配数字系统的处理、存储与传输逻辑 3.1.2 数字编码的核心优势 # 抗干扰能力强，远距离传输保真度高（核心优势）：数字信号仅需区分\u0026quot;0\u0026quot;/\u0026ldquo;1\u0026rdquo;，噪声需超过阈值才会导致误码，且可通过纠错编码进一步优化 信道利用率高：通过压缩编码减少冗余，节省传输带宽 保真度可控：调整量化步长可灵活控制信号精度（如语音编码的8bit/16bit选择） 安全性强：数字信号易加密（如AES加密），抗窃听能力优于模拟信号 业务灵活性：支持三网融合（电信网、互联网、广播电视网），同一网络承载多业务（通话、上网、高清电视） 便于网络管理：数字信号易监控、诊断与维护 3.1.3 基本概念（三步法） # 抽样：将连续时间、连续幅度的模拟信号 → 离散时间、连续幅度的抽样信号\n公式：$x_s(t) = x(t) \\cdot p_T(t)$，其中$p_T(t)$为抽样脉冲序列，$T_s$为抽样间隔 量化：将离散时间、连续幅度的抽样信号 → 离散时间、离散幅度的量化信号\n核心：通过\u0026quot;分层\u0026quot;将连续幅度映射到有限个离散电平（量化电平） 编码：将量化后的离散电平 → 二进制码组（如8bit PCM码）\n例：256个量化电平需$N=8$位二进制码（$M=2^N$） 3.2 低通与带通信号抽样定理 # 3.2.1 抽样定理的直观理解 # 电影原理：每秒24帧静态画面（抽样间隔$T_s=1/24s$），利用人眼视觉暂留（0.1-0.4s）形成连续动态图像 高数曲线分析：连续曲线的积分可通过离散抽样点的数值计算近似 核心结论：连续信号可通过足够密集的离散抽样点无失真恢复 3.2.2 低通信号的三种抽样方式 # 低通信号定义：频带限定在$0 \\sim f_M$（最高频率为$f_M$）\n抽样类型 核心特点 时域表达式 频域特性 工程应用 理想抽样 抽样脉冲为冲激序列（$\\delta_T(t)$），仅理论存在 $x_s(t) = \\sum_{n=-\\infty}^{\\infty} x(nT_s) \\delta(t - nT_s)$ 抽样信号频谱$X_s(f) = \\frac{1}{T_s} \\sum_{n=-\\infty}^{\\infty} X(f - nf_s)$（原频谱周期性延拓） 理论分析基准 自然抽样 抽样脉冲为非冲激（如矩形脉冲），脉冲顶部跟随输入信号变化 $x_s(t) = x(t) \\cdot \\sum_{n=-\\infty}^{\\infty} P(t - nT_s)$（$P(t)$为脉冲波形） 频谱延拓部分受脉冲傅里叶系数$C_n$加权：$X_s(f) = \\sum_{n=-\\infty}^{\\infty} C_n X(f - nf_s)$ 特殊通信系统，理论研究 平顶抽样 先瞬时抽样，再通过\u0026quot;抽样保持电路\u0026quot;保持抽样值至下一个周期，脉冲顶部平坦 $x_s(t) = \\sum_{n=-\\infty}^{\\infty} x(nT_s) P(t - nT_s)$（$P(t)$为矩形保持脉冲） $X_s(f) = P（f)\\frac{1}{T_s}\\sum_{n=-\\infty}^{\\infty} X(f - nf_s)$存在\u0026quot;孔径失真\u0026quot;（由保持脉冲的傅里叶变换$P(f)$加权导致），需后端滤波补偿 现代ADC、数据采集系统（标准方案） 关键对比：自然抽样 vs 平顶抽样 # 自然抽样：类似\u0026quot;模糊录像\u0026quot;（脉冲期间信号变化），ADC兼容性差 平顶抽样：类似\u0026quot;高速抓拍\u0026quot;（瞬时值保持），提供稳定电压供ADC转换，抗干扰性好 3.2.3 混叠与低通抽样定理 # 1. 混叠现象 # 产生条件：抽样频率$f_s \u0026lt; 2f_M$（不满足Nyquist条件） 后果：抽样信号的频谱副本（延拓部分）重叠，无法无失真恢复原信号\n例：原信号$f=3kHz$，若$f_s=4kHz$，混叠后会被误认为$f=1kHz$信号 2. 低通抽样定理（定理3.2.1） # 对频带限定在$0 \\sim f_M$的连续信号$x(t)$，若抽样频率满足：\n$$f_s \\geq 2f_M$$ 则由抽样序列$\\{x(nT_s)\\}$可无失真恢复原信号$x(t)$。\n3. 消除混叠的4种方法 # 方法 原理 优点 缺点 提高抽样率 使$f_s \\gg 2f_M$，拉开频谱副本间距 无失真，避免混叠 数据量翻倍（$f_s$提高1倍，数据量增1倍），受ADC性能限制 预滤波 抽样前用陡峭截止滤波器滤除$f \u0026gt; f_M$的高频成分 降低$f_s$需求，工程成本低 丢失部分高频成分（若高频能量占比低，影响可忽略） 后滤波 重建后用低通滤波器滤除混叠分量 操作简单 混叠分量已落入基带，无法区分\u0026quot;有效信号\u0026quot;与\u0026quot;混叠噪声\u0026quot;，失真严重 数字滤波抽样 先高率抽样，再用数字滤波器降采样 模拟滤波器要求低（过渡带平缓），信噪比高 需额外数字信号处理模块 应用实例：电话系统 # 语音信号高频成分（\u0026gt;3.4kHz）对理解影响小，预滤波后保留$300Hz \\sim 3.4kHz$ 抽样频率$f_s=8kHz$（$2 \\times 3.4kHz \\approx 6.8kHz$，留有余量） 3.2.4 带通抽样定理 # 1. 问题背景 # 带通信号定义：频带限定在$f_L \\sim f_H$（带宽$W = f_H - f_L$）\n若直接套用低通抽样定理，需$f_s \\geq 2f_H$，但当$f_H \\gg W$（如射频信号$f_H=6GHz$，$W=20MHz$），$f_s$过高（需12GHz），硬件难以实现。\n2. 带通抽样定理（定理3.2.2） # 对频带$W = f_H - f_L$的带通信号$x(t)$，最低抽样频率为：\n$$f_{s,\\text{min}} = 2W \\left(1 + \\frac{M}{N}\\right)$$ 其中：\n$N = \\lfloor \\frac{f_H}{W} \\rfloor$（向下取整） $M = \\frac{f_H}{W} - N$（小数部分，$0 \\leq M \u0026lt; 1$） 关键结论 # 最低抽样频率范围：$2W \\leq f_{s,\\text{min}} \u0026lt; 4W$ 当$f_H \\gg W$（如窄带射频信号），$f_{s,\\text{min}} \\approx 2W$（极大降低硬件要求） 非均匀抽样（如周期性非均匀抽样）可使平均抽样率接近$2W$，但实现复杂，抗噪声弱，仅理论参考 3.2.5 抽样频率的权衡（Trade-off） # 抽样频率$f_s$大 抽样频率$f_s$小 ✅ 抗混叠滤波易实现（过渡带宽） ❌ 抗混叠滤波难（过渡带窄） ✅ 保留更多信号细节（小$T_s$） ❌ 可能丢失高频细节 ✅ 对时钟抖动要求低 ❌ 对时钟抖动敏感 ❌ 数据量/存储/算力需求高 ✅ 数据量/存储/算力需求低 3.2.6 窄带vs宽带语音编码对比 # 特性 窄带语音（NB） 宽带语音（WB） 频率范围 $300Hz \\sim 3.4kHz$ $50Hz \\sim 7kHz$ 抽样率 $8kHz$ $16kHz$ 优点 数据量小，带宽占用少 音质自然，抗噪性强 缺点 音质差，抗噪弱 数据量大，处理复杂 应用趋势 传统电话系统 4G/5G VoLTE、视频会议 3.3 模拟信号的量化 # 3.3.1 量化的基本概念 # 定义：将抽样信号的连续幅度映射到有限个离散电平（量化电平）的过程 核心参数： 分层电平$x_k$：幅度分割的边界（如$x_0, x_1, \u0026hellip;, x_{M-1}$） 量化电平$y_k$：每个区间$[x_{k-1}, x_k)$对应的离散值 量化阶距$\\Delta_k = x_k - x_{k-1}$：区间宽度 量化级数$M$：离散电平总数，满足$M=2^N$（$N$为量化位数） 3.3.2 量化噪声的分类与特性 # 量化误差$e = y_k - x$（$x$为抽样值，$y_k$为量化值），误差的平均功率称为量化噪声。\n噪声类型 产生条件 特性 功率计算（均匀量化） 控制方法 颗粒噪声（非过载） $x \\in [X_{\\text{min}}, X_{\\text{max}}]$（抽样值在量化动态范围内） 误差有界（$-\\Delta/2 \\leq e \\leq \\Delta/2$），类似\u0026quot;嘶嘶声\u0026quot;背景噪声 $\\sigma_q^2=\\int_{-\\Delta/2}^{\\Delta/2}{e^2p(e)de}=\\int_{-\\Delta/2}^{\\Delta/2}{e^2\\frac{1}{\\Delta}de}=\\frac{\\Delta^2}{12}$ 减小$\\Delta$（增加$N$），非均匀量化（小信号细量化） 过载噪声（削波） $x \u0026lt; X_{\\text{min}}$或$x \u0026gt; X_{\\text{max}}$（抽样值超出动态范围） 误差无界（随$x$增大而增大），严重非线性失真，\u0026ldquo;刺耳\u0026quot;声 $\\sigma_{\\text{ov}}^2 = \\int_{x\u0026gt; X_{\\text{max}}} (x - X_{\\text{max}})^2 p_x(x)dx$ 扩展量化动态范围$[X_{\\text{min}}, X_{\\text{max}}]$，匹配信号峰值因数 关键公式：量化信噪比 # 信号平均功率$S = E[x^2]$，总量化噪声功率$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_{\\text{ov}}^2$，则信噪比： $S_x=\\int_{x_{min}}^{x_{max}}{x^2p_X\\left(x\\right)dx}$ $$\\text{SNR} = 10\\lg\\left(\\frac{S}{\\sigma_{\\text{total}}^2}\\right) \\quad (\\text{单位：dB})$$ 均匀量化时，每增加1位量化位数$N$，SNR提升约6dB（核心结论） 3.3.3 两种量化方式对比 # 1. 均匀量化 # 特点：量化阶距$\\Delta_k = \\Delta$（常数），所有区间宽度相同 优点：实现简单（无需非线性变换） 缺点：对小信号不利（小信号$S$小，SNR低），动态范围受限\n例：语音信号（拉普拉斯分布，小信号概率高），均匀量化时小信号SNR远低于大信号 2. 非均匀量化 # 核心思想：\u0026ldquo;压大扩小\u0026rdquo;\u0026mdash;\u0026mdash;对小信号用小$\\Delta$（细量化），对大信号用大$\\Delta$（粗量化） 实现步骤： 压缩：输入信号$x$经非线性变换$y = f(x)$（放大小信号，压缩大信号） 均匀量化：对压缩后的$y$进行均匀量化 扩展：解码时经逆变换$x = f^{-1}(y_k)$恢复原信号 关键标准： A律（欧洲/中国）：$A=87.56$，用十三折线近似理想对数压缩 小信号区域（$0 \\leq x \\leq 1/A$）：线性变换，$\\Delta$小 大信号区域（$x \u0026gt; 1/A$）：对数变换，$\\Delta$大 μ律（北美）：$\\mu=255$，用十五折线近似理想对数压缩 3.3.4 标量量化 vs 矢量量化 # 特性 标量量化（SQ） 矢量量化（VQ） 处理对象 单个抽样值（1维标量） 一组抽样值（k维矢量，如k=4/8） 操作方式 独立量化每个样值 联合量化一组样值，利用样值相关性 复杂度 低（仅需存储M个量化电平） 高（码本存储、搜索复杂度随k指数增长） 性能 一般（无法利用样值相关性） 优（形状增益+记忆增益，SNR更高） 应用场景 大多数ADC、PCM编码（基础方案） 语音编码（LSP参数量化）、图像压缩 3.4 脉冲编码调制（PCM） # 3.4.1 核心作用 # 将量化后的离散电平 → 二进制码组，是ADC的最后一步，实现\u0026quot;统一数字格式\u0026rdquo;\u0026mdash;\u0026mdash;无论信源类型（语音、图像），均转为\u0026quot;0\u0026quot;/\u0026ldquo;1\u0026quot;序列，便于加密、传输、存储。\n3.4.2 常用PCM编码方式对比 # 编码类型 特点 抗干扰性 适用场景 自然码 按电平大小顺序映射（如0→0000，1→0001），简单易实现 差 低速、低噪声场景 格雷码 相邻电平的码组仅1位不同（如0→0000，1→0001，2→0011） 强 噪声敏感场景（如MPSK调制） 折叠码 符号幅度码（最高位表极性：1→正，0→负；其余位表幅度），对称于零电平 中 小信号概率高的场景（如语音） 示例：4位编码对比（16个电平） # 电平序号 自然码 格雷码 折叠码 0 0000 0000 0111 1 0001 0001 0110 8 1000 1100 1000 15 1111 1000 1111 3.4.3 A率PCM编码（国际标准） # 1. 码组结构（8位编码） # 码位 作用 说明 M1 极性码 1→正电平，0→负电平 M2-M4 段落码 8个段落（000~111），标识抽样值所在区间 M5-M8 段内码 每个段落16个量化级（0000~1111），标识段内具体位置 2. 段落参数（$\\Delta_1=2$为基准） # 段落 量化阶距$\\Delta$ 起始值 结束值 段落码 1 2 0 32 000 2 4 32 64 001 3 8 64 128 010 4 16 128 256 011 5 32 256 512 100 6 64 512 1024 101 7 128 1024 2048 110 8 256 2048 4096 111 3. 编码/译码步骤 # 编码示例：输入$x=-0.74V$（动态范围$\\pm V$） 极性码M1=0（负） 确定段落：$0.74V$对应量化单位约1500，落在第6段（512~1024？需结合具体电压映射，此处简化），段落码M2-M4=101 段内码：第6段$\\Delta=64$，起始值512，$(1500-512)/64 \\approx 15.4$，取整15→1111，段内码M5-M8=1111 输出码组：0 101 1111 译码示例：接收码组0 110 0111 极性：M1=0→负 段落：M2-M4=110→第7段，起始值1024，$\\Delta=128$ 段内值：M5-M8=0111→7，段内量化值=7×128=896 重建值：$-(1024 + 896 + 128/2) = -1984$（加$\\Delta/2$补偿量化误差） 📚 3.5 差分脉冲编码调制（DPCM） # 🔍 3.5.1 为什么引入DPCM？\u0026mdash;\u0026mdash; 信源冗余的利用 # 1. 信源核心特点：记忆性与相关性 # 大多数信号（语音、图像）是有记忆信源，相邻样值存在强关联： 语音信号：相邻抽样点相关系数≈80%（【此处插入图片：语音信号功率谱与相关函数图（相关\u0026quot;距离\u0026quot;0~10000）】） 视频图像： 帧间（时域）：相邻帧内容相似（如人物移动、背景不变） 帧内（空域）：相邻像素块灰度值接近 信号样值的冗余性：相邻样值变化小，直接编码原信号存在大量重复信息 2. DPCM核心思想 # 不直接对原信号$x(k)$编码，而是对**\u0026ldquo;原信号-预测值\u0026quot;的差值**编码：\n$$d(k) = x(k) - x_e(k)$$ 其中：\n$x_e(k)$：当前信号$x(k)$的预测值（由过去重建值$x_r(k-1),x_r(k-2),\u0026hellip;$计算） $d(k)$：差值信号（动态范围远小于$x(k)$，可减少量化位数，降低码率） 📌 3.5.2 DPCM基本原理 # 1. 核心公式与误差分析 # 预测值计算（基于过去重建值）：\n$$x_e(k) = f\\left[x_r(k-1), x_r(k-2), ..., x_r(k-N)\\right]$$ （$f(\\cdot)$为预测函数，$N$为预测阶数） 重建信号：\n$$x_r(k) = x_e(k) + d_q(k)$$ （$d_q(k)$为$d(k)$的量化值） 译码误差（仅由量化引入）：\n$$e(k) = x(k) - x_r(k) = d(k) - d_q(k)$$ 2. DPCM性能指标：信噪比 # 信号平均功率$S_x = E\\left[x^2(k)\\right]$，误差平均功率$N_e = E\\left[e^2(k)\\right]$，则：\n$$\\text{SNR} = \\frac{S_x}{N_e} = G_p \\cdot \\text{SNR}_q$$ 其中：\n$G_p = \\frac{E\\left[x^2(k)\\right]}{E\\left[d^2(k)\\right]}$：预测增益（预测越准，$d(k)$越小，$G_p$越大） $\\text{SNR}_q = \\frac{E\\left[d^2(k)\\right]}{E\\left[e^2(k)\\right]}$：差值信号的量化信噪比 3. DPCM原理框图 # 【此处插入图片：DPCM编码器与解码器原理框图（含预测器、量化器、编码器/解码器）】\n编码器：$x(k) \\to$ 预测器（$x_e(k)$）$\\to$ 差值$d(k)$ $\\to$ 量化器（$d_q(k)$）$\\to$ 编码$C(k)$ 解码器：$C(k) \\to$ 解码（$d_q(k)$）$\\to$ 预测器（$x_e(k)$）$\\to$ 重建$x_r(k) = x_e(k) + d_q(k)$ 📌 3.5.3 信号预测的3种基本方法 # 预测类型 核心逻辑 时域表达式 Z变换与传递函数 特点与应用 🔹 极点预测法 用过去重建值预测当前值 $x_e(k) = \\sum_{i=1}^N a_i x_r(k-i)$（$a_i$为预测系数） $D_q(Z) \\approx X_r(Z) - \\sum_{i=1}^N a_i Z^{-i} X_r(Z)$ $H(Z) = \\frac{X_r(Z)}{D_q(Z)} = \\frac{1}{1 - \\sum_{i=1}^N a_i Z^{-i}}$ 传递函数仅含极点，误差较小，适用于语音信号 🔹 零点预测法 用过去差值预测当前值 $x_e(k) = \\sum_{i=1}^M b_i d_q(k-i)$（$b_i$为预测系数） $X_r(Z) = D_q(Z) \\left(1 + \\sum_{i=1}^M b_i Z^{-i}\\right)$ $H(Z) = 1 + \\sum_{i=1}^M b_i Z^{-i}$ 传递函数仅含零点，实现简单，适用于低复杂度场景 🔹 零-极点预测法 结合过去重建值+过去差值预测 $x_e(k) = \\sum_{i=1}^N a_i x_r(k-i) + \\sum_{i=1}^M b_i d_q(k-i)$ $H(Z) = \\frac{1 + \\sum_{i=1}^M b_i Z^{-i}}{1 - \\sum_{i=1}^N a_i Z^{-i}}$ 传递函数含零极点，误差最小，适用于高精度场景 各预测方法的编解码器结构 # 极点预测法编解码器：【此处插入图片：极点预测法编码器（含$\\sum a_i Z^{-i}$模块）与解码器框图】 零点预测法编解码器：【此处插入图片：零点预测法编码器（含$\\sum b_i Z^{-i}$模块）与解码器框图】 零-极点预测法编解码器：【此处插入图片：零-极点预测法编码器（含双求和模块）与解码器框图】 📌 3.5.4 最佳预测系数（均方误差最小准则） # 1. 优化目标：最小化预测误差的均方值 # 预测误差$d(k) = x(k) - x_e(k)$，均方误差：\n$$E\\left[d^2(k)\\right] = E\\left[\\left(x(k) - \\sum_{i=1}^N a_i x(k-i)\\right)^2\\right]$$ 2. 最佳系数条件（求导为零） # 对$a_i$求偏导并令其为0，得：\n$$E\\left[\\left(x(k) - \\sum_{j=1}^N a_j x(k-j)\\right) x(k-i)\\right] = 0 \\quad (i=1,2,...,N)$$ 3. Yule-Walker方程（平稳信号场景） # 若$x(k)$是平稳随机过程，其自相关函数$R(\\tau) = E\\left[x(k) x(k-\\tau)\\right]$，则方程化为矩阵形式：\n$$\\begin{bmatrix} R(0) \u0026 R(1) \u0026 ... \u0026 R(N-1) \\\\ R(1) \u0026 R(0) \u0026 ... \u0026 R(N-2) \\\\ ... \u0026 ... \u0026 ... \u0026 ... \\\\ R(N-1) \u0026 R(N-2) \u0026 ... \u0026 R(0) \\end{bmatrix} \\begin{bmatrix} a_{1,\\text{opt}} \\\\ a_{2,\\text{opt}} \\\\ ... \\\\ a_{N,\\text{opt}} \\end{bmatrix} = \\begin{bmatrix} R(1) \\\\ R(2) \\\\ ... \\\\ R(N) \\end{bmatrix}$$ 4. 预测器阶数选择 # 语音信号：相邻样点相关性随阶数增加而减弱，通常取$N=3\\sim5$ 增益饱和特性：阶数超过5后，预测增益提升不明显（【此处插入图片：预测增益随阶数变化曲线（N=1~9，饱和特征明显）】） 📚 3.5.5 自适应DPCM（ADPCM）\u0026mdash;\u0026mdash; 非平稳信号的优化 # 🔍 为什么需要ADPCM？ # 固定预测系数+固定量化阶距的DPCM存在局限：\n非平稳信号（如语音）：功率变化范围达45dB（$10^{4.5}=31623$倍），固定参数无法适配 改进方向：自适应预测（动态调整系数）+ 自适应量化（动态调整阶距） 📌 1. 自适应预测（LMS算法） # 核心逻辑：跟踪信号变化，实时调整预测系数$a_i(k)$ # 预测值更新：\n$$x_e(k) = \\sum_{i=1}^N a_i(k) x(k-i)$$ 系数调整公式（最小均方误差准则近似）：\n$$\\hat{a}_i(k+1) = \\hat{a}_i(k) + \\mu x(k-i) d(k)$$ 其中： $\\mu$：步长因子（控制收敛速度与稳定性，$0\u0026lt;\\mu\u0026lt;1$） $d(k) = x(k) - x_e(k)$：当前差值（反映预测偏差） 📌 2. 自适应量化（动态调整阶距$\\Delta(k)$） # 核心逻辑：根据差值方差$\\sigma_d^2(k)$调整阶距，匹配信号幅度变化 # 差值方差估计（平滑滤波）：\n$$\\hat{\\sigma}_d^2(k) = \\alpha \\hat{\\sigma}_d^2(k-1) + (1-\\alpha) d_q^2(k-1) \\quad (0\u003c\\alpha\u003c1)$$ （$\\alpha$为平滑系数，平衡响应速度与稳定性） 量化阶距调整：\n$$\\Delta(k) = \\Delta(k-1) \\cdot \\left( \\alpha + (1-\\alpha) \\cdot \\frac{d_q^2(k-1)}{\\hat{\\sigma}_d^2(k-1)} \\right)^{1/2}$$ 或简化为查表方式：\n$$\\Delta(k) = \\Delta(k-1) \\cdot F(|C(k-1)|)$$ （$C(k-1)$为上一编码输出，$F(\\cdot)$为预设调整因子表） 📌 3. ADPCM实现方案 # 【此处插入图片：ADPCM编码器（含自适应预测器、自适应量化器）与解码器框图】\n编码器：$x(k) \\to$ 自适应预测器（$x_e(k)$）$\\to$ 差值$d(k)$ $\\to$ 自适应量化器（$d_q(k)$）$\\to$ 编码$C(k)$ 解码器：$C(k) \\to$ 解码（$d_q(k)$）$\\to$ 自适应预测器（$x_e(k)$）$\\to$ 自适应逆量化器 $\\to$ 重建$x_r(k)$ 💡 思考问题 # ADPCM为什么效率高？\n✅ 既利用信源相关性（差值编码），又通过自适应匹配非平稳信号，在32kbit/s码率下音质接近64kbit/s PCM ADPCM的\u0026quot;自适应\u0026quot;体现在哪里？\n✅ 自适应预测（动态调整$a_i(k)$）+ 自适应量化（动态调整$\\Delta(k)$） PCM→DPCM→ADPCM的演进启示？\n✅ 从\u0026quot;直接编码\u0026quot;到\u0026quot;利用相关性压缩\u0026quot;再到\u0026quot;自适应优化\u0026rdquo;，核心是在复杂度与性能间找最优平衡 📚 3.6 增量调制（ΔM） # 🔍 核心思想：高抽样率+1bit量化 # 特点：抽样率远大于Nyquist频率（如语音$f_s=32kHz$），每次抽样仅输出1bit（\u0026ldquo;1\u0026quot;表示$x(t)$上升，\u0026ldquo;0\u0026quot;表示下降） 优势：结构简单、无需码字同步、抗误码能力强（适用于军用通信） 📌 3.6.1 简单ΔM # 1. 工作原理 # 差值计算：$d(t) = x(t) - x_l(t)$（$x_l(t)$为本地重建信号，阶梯波） 编码规则： 若$d(t) \u0026gt; 0$：输出\u0026quot;1\u0026rdquo;，$x_l(t)$加$\\Delta$（$\\Delta$为量化阶距） 若$d(t) \u0026lt; 0$：输出\u0026quot;0\u0026rdquo;，$x_l(t)$减$\\Delta$ 重建信号：$x_l(t) = \\sum_{n=-\\infty}^{\\infty} \\text{sgn}(d(nT_s)) \\cdot \\Delta \\cdot p(t - nT_s)$\n（$p(t)$为矩形保持脉冲，$p(t) = u(t) - u(t-T_s)$） 【此处插入图片：简单ΔM编码器框图（含积分器、二值量化器、脉冲发生器）】\n2. 关键问题：过载失真 # （1）过载条件推导 # 重建信号最大变化率：$\\frac{dx_l(t)}{dt} = \\frac{\\Delta}{T_s} = \\Delta f_s$ 输入正弦信号$x(t) = A\\cos(\\omega t+\\theta)$的最大变化率：$\\max\\left|\\frac{dx(t)}{dt}\\right| = \\omega A$ 不过载条件：$\\omega A \\leq \\Delta f_s$ → $A \\leq \\frac{\\Delta f_s}{2\\pi f}$（$f=\\omega/(2\\pi)$） ⚠️ 结论：简单ΔM对高频信号敏感\u0026mdash;\u0026mdash;频率$f$越高，允许的最大幅度$A$越小，易过载！\n（2）过载与标量量化过载的区别 # 【此处插入图片：左图（标量量化过载：超出动态范围削波）+ 右图（ΔM过载：重建波无法跟踪原信号）】\n3. 量化噪声（没过载场景） # 误差范围：$-\\Delta \u0026lt; e(t) \u0026lt; \\Delta$（均匀分布） 量化噪声功率：$\\sigma_q^2 = \\frac{\\Delta^2}{3}$ 量化信噪比（正弦信号）：\n$$\\text{SNR}_{q,\\text{dB}} = 10\\lg\\left(\\frac{3 f_s^2}{8\\pi^2 f^2}\\right) = 10\\lg\\frac{3}{8\\pi^2} + 20\\lg f_s - 20\\lg f$$ ✅ 抽样率$f_s$提高1倍，SNR提升≈6dB；信号频率$f$提高1倍，SNR下降≈6dB 📌 3.6.2 Δ-Σ调制（增量总和调制）\u0026mdash;\u0026mdash; 解决高频过载问题 # 1. 简单ΔM的痛点 # 过载与频率相关：高频信号易过载，无法实现信源透明性（系统性能受信源频率影响） 2. 改进核心：预处理+逆处理 # 编码端：先对$x(t)$积分（平滑高频，抑制信号变化率），再进行ΔM调制 解码端：先对接收信号微分（恢复原信号高频成分），再低通滤波 【此处插入图片：Δ-Σ调制编码器（含积分器）与解码器（含微分器）原理框图】\n3. 关键优势：过载条件与频率无关 # 积分后信号$y(t) = \\int x(t)dt = \\frac{A}{\\omega}\\sin(\\omega t+\\theta)$ 过载条件：$\\max\\left|\\frac{dy(t)}{dt}\\right| = A \\leq \\frac{\\Delta f_s}{2\\pi f_H}$（$f_H$为低通滤波器截止频率）\n✅ 过载仅与信号幅度$A$、抽样率$f_s$、滤波器截止频率$f_H$相关，与信号本身频率$f$无关，实现信源透明性。 📌 3.6.3 数字压扩自适应ΔM\u0026mdash;\u0026mdash; 兼顾过载与颗粒噪声 # 1. 现有方案局限 # 简单ΔM和Δ-Σ调制的量化阶距$\\Delta$固定，无法同时避免过载（需大$\\Delta$）和减少颗粒噪声（需小$\\Delta$）。\n2. 核心改进：动态调整$\\Delta$（基于\u0026quot;连码检测\u0026rdquo;） # 信号变化率增大的标志：编码输出出现连\u0026quot;0\u0026quot;或连\u0026quot;1\u0026quot;（重建波无法跟踪，持续加/减$\\Delta$） 调整逻辑：连码数越多，$\\Delta$调大（应对高变化率）；无连码时，$\\Delta$调小（减少颗粒噪声） 【此处插入图片：连\u0026quot;0\u0026quot;/连\u0026quot;1\u0026quot;现象示意图（信号斜率陡峭时，输出持续\u0026quot;1\u0026quot;）】\n3. 核心模块功能 # 模块 作用 连码检测电路 统计连\u0026quot;0\u0026quot;/连\u0026quot;1\u0026quot;数目，生成$\\Delta$调整指令 平滑电路 平滑调整指令，避免$\\Delta$突变（平衡稳定性与灵敏度，削弱噪声干扰） 可调幅脉冲发生器 根据指令动态调整$\\Delta$大小 4. 性能改善 # 【此处插入图片：数字压扩自适应ΔM与简单ΔM的SNR对比曲线（A-B段自适应调整Δ，B-C段Δ最小固定）】\nA-B段：随输入信号变化自适应调整$\\Delta$，SNR稳定； B-C段：$\\Delta$已调至最小，SNR随输入减小而下降（但优于简单ΔM）。 💡 思考问题 # ΔM的核心思想体现了什么设计哲学？\n✅ \u0026ldquo;以高抽样率换低量化位数\u0026rdquo;：用远高于Nyquist的抽样率保证相邻样值相关性，仅用1bit量化简化系统。 Δ-Σ调制的\u0026quot;预处理\u0026quot;思想可推广吗？\n✅ 可推广：通过\u0026quot;预变换适配系统\u0026quot;+\u0026ldquo;逆变换恢复原信号\u0026rdquo;，解决系统与信源的不兼容问题（如信号频率、动态范围）。 📚 3.7 误码性能分析（ΔM vs 线性PCM） # 🔍 核心对比：两种编码的抗误码能力 # 1. ΔM的误码分析 # 误码影响：1个误码产生幅度为$2\\Delta$的反向干扰脉冲（如\u0026quot;1\u0026quot;变\u0026quot;0\u0026quot;，重建波多减1次$\\Delta$，等效误差$2\\Delta$） 干扰脉冲平均功率：$\\sigma_t^2 = (2\\Delta)^2 P_b = 4\\Delta^2 P_b$（$P_b$为误比特率） 总噪声功率：$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_t^2 = \\frac{\\Delta^2}{3} + 4\\Delta^2 P_b$ 2. 线性PCM的误码分析 # 误码影响：1位误码导致量化电平偏差（如第$k$位误码，偏差为$2^{k-1}\\Delta$） 误码噪声功率：$\\sigma_t^2 = \\frac{M^2 - 1}{3} \\Delta^2 P_b$（$M=2^N$为量化级数，$N$为量化位数） 总噪声功率：$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_t^2 = \\frac{\\Delta^2}{12} + \\frac{M^2 - 1}{3} \\Delta^2 P_b$ 3. 抗误码性能对比（总SNR≥1/2量化SNR） # 编码类型 误比特率要求（$P_b$） 抗误码能力 线性PCM（$N=8$，$M=256$） $P_b \\leq 3.816 \\times 10^{-6}$ 弱 ΔM $P_b \\leq 3.735 \\times 10^{-4}$ 强 ✅ 结论：ΔM的抗误码性能远优于线性PCM，适合噪声恶劣的场景（如军用通信）。\n📚 补充专题：语音编码技术与压缩感知 # 🔍 补充A：语音编码分类（基于编码原理） # 编码类型 核心原理 码率范围 音质 代表技术 波形编码 对语音波形抽样、量化、编码，重建波形接近原信号 16~64kbit/s 高（接近原音） PCM、ADPCM 参量编码 提取语音物理模型参数（如声门激励、声道滤波系数），重建语音而非波形 2.4~4.8kbit/s 中（可懂度优先） LPC声码器 混合编码 结合波形编码（保证音质）与参量编码（压缩码率） 4~16kbit/s 高 CELP、G.729 🔍 补充B：压缩感知（新采样理论） # 核心原理：利用信号的稀疏性（如语音在傅里叶域稀疏），以远低于Nyquist的抽样率随机采样，通过非线性算法（如L1正则化）重建信号。 意义：2007年美国《科技评论》十大科技进展，应用于图像处理、微波成像、生物医学工程等领域，突破传统抽样率限制。 📝 本章子专题小结 # 技术演进逻辑：PCM（无压缩）→ DPCM（利用相关性压缩）→ ADPCM（自适应优化）→ ΔM（高抽样率+1bit量化），核心是不断挖掘信源冗余，平衡性能与复杂度。 关键设计思路： 相关性利用：通过预测减少差值动态范围； 自适应优化：应对非平稳信号（如语音）的时变特性； 预处理思想：通过变换（积分/微分）解决系统与信源的不兼容（如Δ-Σ调制）。 抗误码性能：ΔM \u0026gt; 线性PCM，ΔM适合恶劣信道，PCM适合高质量传输。 ","date":"2025-10-15","externalUrl":null,"permalink":"/posts/pandoc-conversion-test/","section":"文章","summary":"","title":"pandoc转换测试文档","type":"posts"},{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"标签","summary":"","title":"学习笔记","type":"tags"},{"content":"","date":"2025-10-15","externalUrl":null,"permalink":"/tags/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/","section":"标签","summary":"","title":"通信原理","type":"tags"},{"content":"模拟信号的数字编码PPT\n本章核心框架 # 核心流程：模拟信号 → 抽样 → 量化 → 编码（数字信号） 关键技术：抽样定理、量化方法（均匀/非均匀）、编码调制（PCM/DPCM/ΔM）、误码性能优化 核心目标：在保证信号质量的前提下，实现高效的模拟-数字转换与传输 3.1 引言 # 3.1.1 数字编码的必要性 # 模拟信号的数字编码是连接模拟世界与数字系统的唯一桥梁，原因如下：\n现代信息系统（计算机、互联网、云存储、智能手机）均基于数字技术构建 模拟信号无法直接适配数字系统的处理、存储与传输逻辑 3.1.2 数字编码的核心优势 # 抗干扰能力强，远距离传输保真度高（核心优势）：数字信号仅需区分\u0026quot;0\u0026quot;/\u0026ldquo;1\u0026rdquo;，噪声需超过阈值才会导致误码，且可通过纠错编码进一步优化 信道利用率高：通过压缩编码减少冗余，节省传输带宽 保真度可控：调整量化步长可灵活控制信号精度（如语音编码的8bit/16bit选择） 安全性强：数字信号易加密（如AES加密），抗窃听能力优于模拟信号 业务灵活性：支持三网融合（电信网、互联网、广播电视网），同一网络承载多业务（通话、上网、高清电视） 便于网络管理：数字信号易监控、诊断与维护 3.1.3 基本概念（三步法） # 抽样：将连续时间、连续幅度的模拟信号 → 离散时间、连续幅度的抽样信号\n公式：$x_s(t) = x(t) \\cdot p_T(t)$，其中$p_T(t)$为抽样脉冲序列，$T_s$为抽样间隔 量化：将离散时间、连续幅度的抽样信号 → 离散时间、离散幅度的量化信号\n核心：通过\u0026quot;分层\u0026quot;将连续幅度映射到有限个离散电平（量化电平） 编码：将量化后的离散电平 → 二进制码组（如8bit PCM码）\n例：256个量化电平需$N=8$位二进制码（$M=2^N$） 3.2 低通与带通信号抽样定理 # 3.2.1 抽样定理的直观理解 # 电影原理：每秒24帧静态画面（抽样间隔$T_s=1/24s$），利用人眼视觉暂留（0.1-0.4s）形成连续动态图像 高数曲线分析：连续曲线的积分可通过离散抽样点的数值计算近似 核心结论：连续信号可通过足够密集的离散抽样点无失真恢复 3.2.2 低通信号的三种抽样方式 # 低通信号定义：频带限定在$0 \\sim f_M$（最高频率为$f_M$）\n抽样类型 核心特点 时域表达式 频域特性 工程应用 理想抽样 抽样脉冲为冲激序列（$\\delta_T(t)$），仅理论存在 $x_s(t) = \\sum_{n=-\\infty}^{\\infty} x(nT_s) \\delta(t - nT_s)$ 抽样信号频谱$X_s(f) = \\frac{1}{T_s} \\sum_{n=-\\infty}^{\\infty} X(f - nf_s)$（原频谱周期性延拓） 理论分析基准 自然抽样 抽样脉冲为非冲激（如矩形脉冲），脉冲顶部跟随输入信号变化 $x_s(t) = x(t) \\cdot \\sum_{n=-\\infty}^{\\infty} P(t - nT_s)$（$P(t)$为脉冲波形） 频谱延拓部分受脉冲傅里叶系数$C_n$加权：$X_s(f) = \\sum_{n=-\\infty}^{\\infty} C_n X(f - nf_s)$ 特殊通信系统，理论研究 平顶抽样 先瞬时抽样，再通过\u0026quot;抽样保持电路\u0026quot;保持抽样值至下一个周期，脉冲顶部平坦 $x_s(t) = \\sum_{n=-\\infty}^{\\infty} x(nT_s) P(t - nT_s)$（$P(t)$为矩形保持脉冲） $X_s(f) = P（f)\\frac{1}{T_s}\\sum_{n=-\\infty}^{\\infty} X(f - nf_s)$存在\u0026quot;孔径失真\u0026quot;（由保持脉冲的傅里叶变换$P(f)$加权导致），需后端滤波补偿 现代ADC、数据采集系统（标准方案） 关键对比：自然抽样 vs 平顶抽样 # 自然抽样：类似\u0026quot;模糊录像\u0026quot;（脉冲期间信号变化），ADC兼容性差 平顶抽样：类似\u0026quot;高速抓拍\u0026quot;（瞬时值保持），提供稳定电压供ADC转换，抗干扰性好 3.2.3 混叠与低通抽样定理 # 1. 混叠现象 # 产生条件：抽样频率$f_s \u0026lt; 2f_M$（不满足Nyquist条件） 后果：抽样信号的频谱副本（延拓部分）重叠，无法无失真恢复原信号\n例：原信号$f=3kHz$，若$f_s=4kHz$，混叠后会被误认为$f=1kHz$信号 2. 低通抽样定理（定理3.2.1） # 对频带限定在$0 \\sim f_M$的连续信号$x(t)$，若抽样频率满足：\n$f_s \\geq 2f_M$\n则由抽样序列${x(nT_s)}$可无失真恢复原信号$x(t)$。\n3. 消除混叠的4种方法 # 方法 原理 优点 缺点 提高抽样率 使$f_s \\gg 2f_M$，拉开频谱副本间距 无失真，避免混叠 数据量翻倍（$f_s$提高1倍，数据量增1倍），受ADC性能限制 预滤波 抽样前用陡峭截止滤波器滤除$f \u0026gt; f_M$的高频成分 降低$f_s$需求，工程成本低 丢失部分高频成分（若高频能量占比低，影响可忽略） 后滤波 重建后用低通滤波器滤除混叠分量 操作简单 混叠分量已落入基带，无法区分\u0026quot;有效信号\u0026quot;与\u0026quot;混叠噪声\u0026quot;，失真严重 数字滤波抽样 先高率抽样，再用数字滤波器降采样 模拟滤波器要求低（过渡带平缓），信噪比高 需额外数字信号处理模块 应用实例：电话系统 # 语音信号高频成分（\u0026gt;3.4kHz）对理解影响小，预滤波后保留$300Hz \\sim 3.4kHz$ 抽样频率$f_s=8kHz$（$2 \\times 3.4kHz \\approx 6.8kHz$，留有余量） 3.2.4 带通抽样定理 # 1. 问题背景 # 带通信号定义：频带限定在$f_L \\sim f_H$（带宽$W = f_H - f_L$）\n若直接套用低通抽样定理，需$f_s \\geq 2f_H$，但当$f_H \\gg W$（如射频信号$f_H=6GHz$，$W=20MHz$），$f_s$过高（需12GHz），硬件难以实现。\n2. 带通抽样定理（定理3.2.2） # 对频带$W = f_H - f_L$的带通信号$x(t)$，最低抽样频率为：\n$f_{s,\\text{min}} = 2W \\left(1 + \\frac{M}{N}\\right)$\n其中：\n$N = \\lfloor \\frac{f_H}{W} \\rfloor$（向下取整） $M = \\frac{f_H}{W} - N$（小数部分，$0 \\leq M \u0026lt; 1$） 关键结论 # 最低抽样频率范围：$2W \\leq f_{s,\\text{min}} \u0026lt; 4W$ 当$f_H \\gg W$（如窄带射频信号），$f_{s,\\text{min}} \\approx 2W$（极大降低硬件要求） 非均匀抽样（如周期性非均匀抽样）可使平均抽样率接近$2W$，但实现复杂，抗噪声弱，仅理论参考 3.2.5 抽样频率的权衡（Trade-off） # 抽样频率$f_s$大 抽样频率$f_s$小 ✅ 抗混叠滤波易实现（过渡带宽） ❌ 抗混叠滤波难（过渡带窄） ✅ 保留更多信号细节（小$T_s$） ❌ 可能丢失高频细节 ✅ 对时钟抖动要求低 ❌ 对时钟抖动敏感 ❌ 数据量/存储/算力需求高 ✅ 数据量/存储/算力需求低 3.2.6 窄带vs宽带语音编码对比 # 特性 窄带语音（NB） 宽带语音（WB） 频率范围 $300Hz \\sim 3.4kHz$ $50Hz \\sim 7kHz$ 抽样率 $8kHz$ $16kHz$ 优点 数据量小，带宽占用少 音质自然，抗噪性强 缺点 音质差，抗噪弱 数据量大，处理复杂 应用趋势 传统电话系统 4G/5G VoLTE、视频会议 3.3 模拟信号的量化 # 3.3.1 量化的基本概念 # 定义：将抽样信号的连续幅度映射到有限个离散电平（量化电平）的过程 核心参数： 分层电平$x_k$：幅度分割的边界（如$x_0, x_1, \u0026hellip;, x_{M-1}$） 量化电平$y_k$：每个区间$[x_{k-1}, x_k)$对应的离散值 量化阶距$\\Delta_k = x_k - x_{k-1}$：区间宽度 量化级数$M$：离散电平总数，满足$M=2^N$（$N$为量化位数） 3.3.2 量化噪声的分类与特性 # 量化误差$e = y_k - x$（$x$为抽样值，$y_k$为量化值），误差的平均功率称为量化噪声。\n噪声类型 产生条件 特性 功率计算（均匀量化） 控制方法 颗粒噪声（非过载） $x \\in [X_{\\text{min}}, X_{\\text{max}}]$（抽样值在量化动态范围内） 误差有界（$-\\Delta/2 \\leq e \\leq \\Delta/2$），类似\u0026quot;嘶嘶声\u0026quot;背景噪声 $\\sigma_q^2=\\int_{-\\Delta/2}^{\\Delta/2}{e^2p(e)de}=\\int_{-\\Delta/2}^{\\Delta/2}{e^2\\frac{1}{\\Delta}de}=\\frac{\\Delta^2}{12}$ 减小$\\Delta$（增加$N$），非均匀量化（小信号细量化） 过载噪声（削波） $x \u0026lt; X_{\\text{min}}$或$x \u0026gt; X_{\\text{max}}$（抽样值超出动态范围） 误差无界（随$x$增大而增大），严重非线性失真，\u0026ldquo;刺耳\u0026quot;声 $\\sigma_{\\text{ov}}^2 = \\int_{x\u0026gt; X_{\\text{max}}} (x - X_{\\text{max}})^2 p_x(x)dx$ 扩展量化动态范围$[X_{\\text{min}}, X_{\\text{max}}]$，匹配信号峰值因数 关键公式：量化信噪比 # 信号平均功率$S = E[x^2]$，总量化噪声功率$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_{\\text{ov}}^2$，则信噪比：\n$S_x=\\int_{x_{min}}^{x_{max}}{x^2p_X\\left(x\\right)dx}$\n$\\text{SNR} = 10\\lg\\left(\\frac{S}{\\sigma_{\\text{total}}^2}\\right) \\quad (\\text{单位：dB})$\n均匀量化时，每增加1位量化位数$N$，SNR提升约6dB（核心结论） 3.3.3 两种量化方式对比 # 1. 均匀量化 # 特点：量化阶距$\\Delta_k = \\Delta$（常数），所有区间宽度相同 优点：实现简单（无需非线性变换） 缺点：对小信号不利（小信号$S$小，SNR低），动态范围受限\n例：语音信号（拉普拉斯分布，小信号概率高），均匀量化时小信号SNR远低于大信号 2. 非均匀量化 # 核心思想：\u0026ldquo;压大扩小\u0026rdquo;——对小信号用小$\\Delta$（细量化），对大信号用大$\\Delta$（粗量化） 实现步骤： 压缩：输入信号$x$经非线性变换$y = f(x)$（放大小信号，压缩大信号） 均匀量化：对压缩后的$y$进行均匀量化 扩展：解码时经逆变换$x = f^{-1}(y_k)$恢复原信号 关键标准： A律（欧洲/中国）：$A=87.56$，用十三折线近似理想对数压缩 小信号区域（$0 \\leq x \\leq 1/A$）：线性变换，$\\Delta$小 大信号区域（$x \u0026gt; 1/A$）：对数变换，$\\Delta$大 μ律（北美）：$\\mu=255$，用十五折线近似理想对数压缩 3.3.4 标量量化 vs 矢量量化 # 特性 标量量化（SQ） 矢量量化（VQ） 处理对象 单个抽样值（1维标量） 一组抽样值（k维矢量，如k=4/8） 操作方式 独立量化每个样值 联合量化一组样值，利用样值相关性 复杂度 低（仅需存储M个量化电平） 高（码本存储、搜索复杂度随k指数增长） 性能 一般（无法利用样值相关性） 优（形状增益+记忆增益，SNR更高） 应用场景 大多数ADC、PCM编码（基础方案） 语音编码（LSP参数量化）、图像压缩 3.4 脉冲编码调制（PCM） # 3.4.1 核心作用 # 将量化后的离散电平 → 二进制码组，是ADC的最后一步，实现\u0026quot;统一数字格式\u0026rdquo;——无论信源类型（语音、图像），均转为\u0026quot;0\u0026quot;/\u0026ldquo;1\u0026quot;序列，便于加密、传输、存储。\n3.4.2 常用PCM编码方式对比 # 编码类型 特点 抗干扰性 适用场景 自然码 按电平大小顺序映射（如0→0000，1→0001），简单易实现 差 低速、低噪声场景 格雷码 相邻电平的码组仅1位不同（如0→0000，1→0001，2→0011） 强 噪声敏感场景（如MPSK调制） 折叠码 符号幅度码（最高位表极性：1→正，0→负；其余位表幅度），对称于零电平 中 小信号概率高的场景（如语音） 示例：4位编码对比（16个电平） # 电平序号 自然码 格雷码 折叠码 0 0000 0000 0111 1 0001 0001 0110 8 1000 1100 1000 15 1111 1000 1111 3.4.3 A率PCM编码（国际标准） # 1. 码组结构（8位编码） # 码位 作用 说明 M1 极性码 1→正电平，0→负电平 M2-M4 段落码 8个段落（000~111），标识抽样值所在区间 M5-M8 段内码 每个段落16个量化级（0000~1111），标识段内具体位置 2. 段落参数（$\\Delta_1=2$为基准） # 段落 量化阶距$\\Delta$ 起始值 结束值 段落码 1 2 0 32 000 2 4 32 64 001 3 8 64 128 010 4 16 128 256 011 5 32 256 512 100 6 64 512 1024 101 7 128 1024 2048 110 8 256 2048 4096 111 3. 编码/译码步骤 # 编码示例：输入$x=-0.74V$（动态范围$\\pm V$）\n极性码M1=0（负） 确定段落：$0.74V$对应量化单位约1500，落在第6段（512~1024？需结合具体电压映射，此处简化），段落码M2-M4=101 段内码：第6段$\\Delta=64$，起始值512，$(1500-512)/64 \\approx 15.4$，取整15→1111，段内码M5-M8=1111 输出码组：0 101 1111 译码示例：接收码组0 110 0111\n极性：M1=0→负 段落：M2-M4=110→第7段，起始值1024，$\\Delta=128$ 段内值：M5-M8=0111→7，段内量化值=7×128=896 重建值：$-(1024 + 896 + 128/2) = -1984$（加$\\Delta/2$补偿量化误差） 📚 3.5 差分脉冲编码调制（DPCM） # 🔍 3.5.1 为什么引入DPCM？—— 信源冗余的利用 # 1. 信源核心特点：记忆性与相关性 # 大多数信号（语音、图像）是有记忆信源，相邻样值存在强关联： 语音信号：相邻抽样点相关系数≈80%（【此处插入图片：语音信号功率谱与相关函数图（相关“距离”0~10000）】） 视频图像： 帧间（时域）：相邻帧内容相似（如人物移动、背景不变） 帧内（空域）：相邻像素块灰度值接近 信号样值的冗余性：相邻样值变化小，直接编码原信号存在大量重复信息 2. DPCM核心思想 # 不直接对原信号$x(k)$编码，而是对**“原信号-预测值”的差值**编码：\n$d(k) = x(k) - x_e(k)$\n其中：\n$x_e(k)$：当前信号$x(k)$的预测值（由过去重建值$x_r(k-1),x_r(k-2),\u0026hellip;$计算） $d(k)$：差值信号（动态范围远小于$x(k)$，可减少量化位数，降低码率） 📌 3.5.2 DPCM基本原理 # 1. 核心公式与误差分析 # 预测值计算（基于过去重建值）：\n$x_e(k) = f\\left[x_r(k-1), x_r(k-2), \u0026hellip;, x_r(k-N)\\right]$\n（$f(\\cdot)$为预测函数，$N$为预测阶数） 重建信号：\n$x_r(k) = x_e(k) + d_q(k)$\n（$d_q(k)$为$d(k)$的量化值） 译码误差（仅由量化引入）：\n$e(k) = x(k) - x_r(k) = d(k) - d_q(k)$ 2. DPCM性能指标：信噪比 # 信号平均功率$S_x = E\\left[x^2(k)\\right]$，误差平均功率$N_e = E\\left[e^2(k)\\right]$，则：\n$\\text{SNR} = \\frac{S_x}{N_e} = G_p \\cdot \\text{SNR}_q$\n其中：\n$G_p = \\frac{E\\left[x^2(k)\\right]}{E\\left[d^2(k)\\right]}$：预测增益（预测越准，$d(k)$越小，$G_p$越大） $\\text{SNR}_q = \\frac{E\\left[d^2(k)\\right]}{E\\left[e^2(k)\\right]}$：差值信号的量化信噪比 3. DPCM原理框图 # 【此处插入图片：DPCM编码器与解码器原理框图（含预测器、量化器、编码器/解码器）】\n编码器：$x(k) \\to$ 预测器（$x_e(k)$）$\\to$ 差值$d(k)$ $\\to$ 量化器（$d_q(k)$）$\\to$ 编码$C(k)$ 解码器：$C(k) \\to$ 解码（$d_q(k)$）$\\to$ 预测器（$x_e(k)$）$\\to$ 重建$x_r(k) = x_e(k) + d_q(k)$ 📌 3.5.3 信号预测的3种基本方法 # 预测类型 核心逻辑 时域表达式 Z变换与传递函数 特点与应用 🔹 极点预测法 用过去重建值预测当前值 $x_e(k) = \\sum_{i=1}^N a_i x_r(k-i)$（$a_i$为预测系数） $D_q(Z) \\approx X_r(Z) - \\sum_{i=1}^N a_i Z^{-i} X_r(Z)$ $H(Z) = \\frac{X_r(Z)}{D_q(Z)} = \\frac{1}{1 - \\sum_{i=1}^N a_i Z^{-i}}$ 传递函数仅含极点，误差较小，适用于语音信号 🔹 零点预测法 用过去差值预测当前值 $x_e(k) = \\sum_{i=1}^M b_i d_q(k-i)$（$b_i$为预测系数） $X_r(Z) = D_q(Z) \\left(1 + \\sum_{i=1}^M b_i Z^{-i}\\right)$ $H(Z) = 1 + \\sum_{i=1}^M b_i Z^{-i}$ 传递函数仅含零点，实现简单，适用于低复杂度场景 🔹 零-极点预测法 结合过去重建值+过去差值预测 $x_e(k) = \\sum_{i=1}^N a_i x_r(k-i) + \\sum_{i=1}^M b_i d_q(k-i)$ $H(Z) = \\frac{1 + \\sum_{i=1}^M b_i Z^{-i}}{1 - \\sum_{i=1}^N a_i Z^{-i}}$ 传递函数含零极点，误差最小，适用于高精度场景 各预测方法的编解码器结构 # 极点预测法编解码器：【此处插入图片：极点预测法编码器（含$\\sum a_i Z^{-i}$模块）与解码器框图】 零点预测法编解码器：【此处插入图片：零点预测法编码器（含$\\sum b_i Z^{-i}$模块）与解码器框图】 零-极点预测法编解码器：【此处插入图片：零-极点预测法编码器（含双求和模块）与解码器框图】 📌 3.5.4 最佳预测系数（均方误差最小准则） # 1. 优化目标：最小化预测误差的均方值 # 预测误差$d(k) = x(k) - x_e(k)$，均方误差：\n$E\\left[d^2(k)\\right] = E\\left[\\left(x(k) - \\sum_{i=1}^N a_i x(k-i)\\right)^2\\right]$\n2. 最佳系数条件（求导为零） # 对$a_i$求偏导并令其为0，得：\n$E\\left[\\left(x(k) - \\sum_{j=1}^N a_j x(k-j)\\right) x(k-i)\\right] = 0 \\quad (i=1,2,\u0026hellip;,N)$\n3. Yule-Walker方程（平稳信号场景） # 若$x(k)$是平稳随机过程，其自相关函数$R(\\tau) = E\\left[x(k) x(k-\\tau)\\right]$，则方程化为矩阵形式：\n$\\begin{bmatrix} R(0) \u0026amp; R(1) \u0026amp; \u0026hellip; \u0026amp; R(N-1) \\ R(1) \u0026amp; R(0) \u0026amp; \u0026hellip; \u0026amp; R(N-2) \\ \u0026hellip; \u0026amp; \u0026hellip; \u0026amp; \u0026hellip; \u0026amp; \u0026hellip; \\ R(N-1) \u0026amp; R(N-2) \u0026amp; \u0026hellip; \u0026amp; R(0) \\end{bmatrix} \\begin{bmatrix} a_{1,\\text{opt}} \\ a_{2,\\text{opt}} \\ \u0026hellip; \\ a_{N,\\text{opt}} \\end{bmatrix} = \\begin{bmatrix} R(1) \\ R(2) \\ \u0026hellip; \\ R(N) \\end{bmatrix}$\n4. 预测器阶数选择 # 语音信号：相邻样点相关性随阶数增加而减弱，通常取$N=3\\sim5$ 增益饱和特性：阶数超过5后，预测增益提升不明显（【此处插入图片：预测增益随阶数变化曲线（N=1~9，饱和特征明显）】） 📚 3.5.5 自适应DPCM（ADPCM）—— 非平稳信号的优化 # 🔍 为什么需要ADPCM？ # 固定预测系数+固定量化阶距的DPCM存在局限：\n非平稳信号（如语音）：功率变化范围达45dB（$10^{4.5}=31623$倍），固定参数无法适配 改进方向：自适应预测（动态调整系数）+ 自适应量化（动态调整阶距） 📌 1. 自适应预测（LMS算法） # 核心逻辑：跟踪信号变化，实时调整预测系数$a_i(k)$ # 预测值更新：\n$x_e(k) = \\sum_{i=1}^N a_i(k) x(k-i)$ 系数调整公式（最小均方误差准则近似）：\n$\\hat{a}_i(k+1) = \\hat{a}_i(k) + \\mu x(k-i) d(k)$\n其中： $\\mu$：步长因子（控制收敛速度与稳定性，$0\u0026lt;\\mu\u0026lt;1$） $d(k) = x(k) - x_e(k)$：当前差值（反映预测偏差） 📌 2. 自适应量化（动态调整阶距$\\Delta(k)$） # 核心逻辑：根据差值方差$\\sigma_d^2(k)$调整阶距，匹配信号幅度变化 # 差值方差估计（平滑滤波）：\n$\\hat{\\sigma}_d^2(k) = \\alpha \\hat{\\sigma}_d^2(k-1) + (1-\\alpha) d_q^2(k-1) \\quad (0\u0026lt;\\alpha\u0026lt;1)$\n（$\\alpha$为平滑系数，平衡响应速度与稳定性） 量化阶距调整：\n$\\Delta(k) = \\Delta(k-1) \\cdot \\left( \\alpha + (1-\\alpha) \\cdot \\frac{d_q^2(k-1)}{\\hat{\\sigma}_d^2(k-1)} \\right)^{1/2}$\n或简化为查表方式：\n$\\Delta(k) = \\Delta(k-1) \\cdot F(|C(k-1)|)$\n（$C(k-1)$为上一编码输出，$F(\\cdot)$为预设调整因子表） 📌 3. ADPCM实现方案 # 【此处插入图片：ADPCM编码器（含自适应预测器、自适应量化器）与解码器框图】\n编码器：$x(k) \\to$ 自适应预测器（$x_e(k)$）$\\to$ 差值$d(k)$ $\\to$ 自适应量化器（$d_q(k)$）$\\to$ 编码$C(k)$ 解码器：$C(k) \\to$ 解码（$d_q(k)$）$\\to$ 自适应预测器（$x_e(k)$）$\\to$ 自适应逆量化器 $\\to$ 重建$x_r(k)$ 💡 思考问题 # ADPCM为什么效率高？\n✅ 既利用信源相关性（差值编码），又通过自适应匹配非平稳信号，在32kbit/s码率下音质接近64kbit/s PCM ADPCM的“自适应”体现在哪里？\n✅ 自适应预测（动态调整$a_i(k)$）+ 自适应量化（动态调整$\\Delta(k)$） PCM→DPCM→ADPCM的演进启示？\n✅ 从“直接编码”到“利用相关性压缩”再到“自适应优化”，核心是在复杂度与性能间找最优平衡 📚 3.6 增量调制（ΔM） # 🔍 核心思想：高抽样率+1bit量化 # 特点：抽样率远大于Nyquist频率（如语音$f_s=32kHz$），每次抽样仅输出1bit（“1”表示$x(t)$上升，“0”表示下降） 优势：结构简单、无需码字同步、抗误码能力强（适用于军用通信） 📌 3.6.1 简单ΔM # 1. 工作原理 # 差值计算：$d(t) = x(t) - x_l(t)$（$x_l(t)$为本地重建信号，阶梯波） 编码规则： 若$d(t) \u0026gt; 0$：输出“1”，$x_l(t)$加$\\Delta$（$\\Delta$为量化阶距） 若$d(t) \u0026lt; 0$：输出“0”，$x_l(t)$减$\\Delta$ 重建信号：$x_l(t) = \\sum_{n=-\\infty}^{\\infty} \\text{sgn}(d(nT_s)) \\cdot \\Delta \\cdot p(t - nT_s)$\n（$p(t)$为矩形保持脉冲，$p(t) = u(t) - u(t-T_s)$） 【此处插入图片：简单ΔM编码器框图（含积分器、二值量化器、脉冲发生器）】\n2. 关键问题：过载失真 # （1）过载条件推导 # 重建信号最大变化率：$\\frac{dx_l(t)}{dt} = \\frac{\\Delta}{T_s} = \\Delta f_s$ 输入正弦信号$x(t) = A\\cos(\\omega t+\\theta)$的最大变化率：$\\max\\left|\\frac{dx(t)}{dt}\\right| = \\omega A$ 不过载条件：$\\omega A \\leq \\Delta f_s$ → $A \\leq \\frac{\\Delta f_s}{2\\pi f}$（$f=\\omega/(2\\pi)$） ⚠️ 结论：简单ΔM对高频信号敏感——频率$f$越高，允许的最大幅度$A$越小，易过载！\n（2）过载与标量量化过载的区别 # 【此处插入图片：左图（标量量化过载：超出动态范围削波）+ 右图（ΔM过载：重建波无法跟踪原信号）】\n3. 量化噪声（没过载场景） # 误差范围：$-\\Delta \u0026lt; e(t) \u0026lt; \\Delta$（均匀分布） 量化噪声功率：$\\sigma_q^2 = \\frac{\\Delta^2}{3}$ 量化信噪比（正弦信号）：\n$\\text{SNR}_{q,\\text{dB}} = 10\\lg\\left(\\frac{3 f_s^2}{8\\pi^2 f^2}\\right) = 10\\lg\\frac{3}{8\\pi^2} + 20\\lg f_s - 20\\lg f$\n✅ 抽样率$f_s$提高1倍，SNR提升≈6dB；信号频率$f$提高1倍，SNR下降≈6dB 📌 3.6.2 Δ-Σ调制（增量总和调制）—— 解决高频过载问题 # 1. 简单ΔM的痛点 # 过载与频率相关：高频信号易过载，无法实现信源透明性（系统性能受信源频率影响） 2. 改进核心：预处理+逆处理 # 编码端：先对$x(t)$积分（平滑高频，抑制信号变化率），再进行ΔM调制 解码端：先对接收信号微分（恢复原信号高频成分），再低通滤波 【此处插入图片：Δ-Σ调制编码器（含积分器）与解码器（含微分器）原理框图】\n3. 关键优势：过载条件与频率无关 # 积分后信号$y(t) = \\int x(t)dt = \\frac{A}{\\omega}\\sin(\\omega t+\\theta)$ 过载条件：$\\max\\left|\\frac{dy(t)}{dt}\\right| = A \\leq \\frac{\\Delta f_s}{2\\pi f_H}$（$f_H$为低通滤波器截止频率）\n✅ 过载仅与信号幅度$A$、抽样率$f_s$、滤波器截止频率$f_H$相关，与信号本身频率$f$无关，实现信源透明性。 📌 3.6.3 数字压扩自适应ΔM—— 兼顾过载与颗粒噪声 # 1. 现有方案局限 # 简单ΔM和Δ-Σ调制的量化阶距$\\Delta$固定，无法同时避免过载（需大$\\Delta$）和减少颗粒噪声（需小$\\Delta$）。\n2. 核心改进：动态调整$\\Delta$（基于“连码检测”） # 信号变化率增大的标志：编码输出出现连“0”或连“1”（重建波无法跟踪，持续加/减$\\Delta$） 调整逻辑：连码数越多，$\\Delta$调大（应对高变化率）；无连码时，$\\Delta$调小（减少颗粒噪声） 【此处插入图片：连“0”/连“1”现象示意图（信号斜率陡峭时，输出持续“1”）】\n3. 核心模块功能 # 模块 作用 连码检测电路 统计连“0”/连“1”数目，生成$\\Delta$调整指令 平滑电路 平滑调整指令，避免$\\Delta$突变（平衡稳定性与灵敏度，削弱噪声干扰） 可调幅脉冲发生器 根据指令动态调整$\\Delta$大小 4. 性能改善 # 【此处插入图片：数字压扩自适应ΔM与简单ΔM的SNR对比曲线（A-B段自适应调整Δ，B-C段Δ最小固定）】\nA-B段：随输入信号变化自适应调整$\\Delta$，SNR稳定； B-C段：$\\Delta$已调至最小，SNR随输入减小而下降（但优于简单ΔM）。 💡 思考问题 # ΔM的核心思想体现了什么设计哲学？\n✅ “以高抽样率换低量化位数”：用远高于Nyquist的抽样率保证相邻样值相关性，仅用1bit量化简化系统。 Δ-Σ调制的“预处理”思想可推广吗？\n✅ 可推广：通过“预变换适配系统”+“逆变换恢复原信号”，解决系统与信源的不兼容问题（如信号频率、动态范围）。 📚 3.7 误码性能分析（ΔM vs 线性PCM） # 🔍 核心对比：两种编码的抗误码能力 # 1. ΔM的误码分析 # 误码影响：1个误码产生幅度为$2\\Delta$的反向干扰脉冲（如“1”变“0”，重建波多减1次$\\Delta$，等效误差$2\\Delta$） 干扰脉冲平均功率：$\\sigma_t^2 = (2\\Delta)^2 P_b = 4\\Delta^2 P_b$（$P_b$为误比特率） 总噪声功率：$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_t^2 = \\frac{\\Delta^2}{3} + 4\\Delta^2 P_b$ 2. 线性PCM的误码分析 # 误码影响：1位误码导致量化电平偏差（如第$k$位误码，偏差为$2^{k-1}\\Delta$） 误码噪声功率：$\\sigma_t^2 = \\frac{M^2 - 1}{3} \\Delta^2 P_b$（$M=2^N$为量化级数，$N$为量化位数） 总噪声功率：$\\sigma_{\\text{total}}^2 = \\sigma_q^2 + \\sigma_t^2 = \\frac{\\Delta^2}{12} + \\frac{M^2 - 1}{3} \\Delta^2 P_b$ 3. 抗误码性能对比（总SNR≥1/2量化SNR） # 编码类型 误比特率要求（$P_b$） 抗误码能力 线性PCM（$N=8$，$M=256$） $P_b \\leq 3.816 \\times 10^{-6}$ 弱 ΔM $P_b \\leq 3.735 \\times 10^{-4}$ 强 ✅ 结论：ΔM的抗误码性能远优于线性PCM，适合噪声恶劣的场景（如军用通信）。\n📚 补充专题：语音编码技术与压缩感知 # 🔍 补充A：语音编码分类（基于编码原理） # 编码类型 核心原理 码率范围 音质 代表技术 波形编码 对语音波形抽样、量化、编码，重建波形接近原信号 16~64kbit/s 高（接近原音） PCM、ADPCM 参量编码 提取语音物理模型参数（如声门激励、声道滤波系数），重建语音而非波形 2.4~4.8kbit/s 中（可懂度优先） LPC声码器 混合编码 结合波形编码（保证音质）与参量编码（压缩码率） 4~16kbit/s 高 CELP、G.729 🔍 补充B：压缩感知（新采样理论） # 核心原理：利用信号的稀疏性（如语音在傅里叶域稀疏），以远低于Nyquist的抽样率随机采样，通过非线性算法（如L1正则化）重建信号。 意义：2007年美国《科技评论》十大科技进展，应用于图像处理、微波成像、生物医学工程等领域，突破传统抽样率限制。 📝 本章子专题小结 # 技术演进逻辑：PCM（无压缩）→ DPCM（利用相关性压缩）→ ADPCM（自适应优化）→ ΔM（高抽样率+1bit量化），核心是不断挖掘信源冗余，平衡性能与复杂度。 关键设计思路： 相关性利用：通过预测减少差值动态范围； 自适应优化：应对非平稳信号（如语音）的时变特性； 预处理思想：通过变换（积分/微分）解决系统与信源的不兼容（如Δ-Σ调制）。 抗误码性能：ΔM \u0026gt; 线性PCM，ΔM适合恶劣信道，PCM适合高质量传输。 ","date":"2025-10-14","externalUrl":null,"permalink":"/posts/hugo%E5%90%8C%E6%AD%A5%E6%B5%8B%E8%AF%95/","section":"文章","summary":"","title":"HugoPublish测试","type":"posts"},{"content":"","date":"14 10月 2025","externalUrl":null,"permalink":"/en/tags/hugo-notes/","section":"Tags","summary":"","title":"Hugo-Notes","type":"tags"},{"content":" Hugo 叶页面（Leaf Bundle）导出实现记录 # 本文记录在 Obsidian 中使用 obsidian-enhancing-export + Pandoc，将每篇笔记导出为 Hugo 叶页面结构的过程：目录命名为笔记名，文章改名为 index.md，图片与文章放在同一目录。\n目标结构：\n\u0026lt;笔记名\u0026gt;/ index.md image1.png image2.jpg 背景 # 使用插件：obsidian-enhancing-export（下称 OEE），内部通过 Pandoc 与 Lua filter 转换。 需求：每篇笔记导出时，形成 Hugo 的 leaf bundle（index.md + 同目录资源）。 Vault 中图片可能位于自定义附件目录（由 obsidian-custom-attachment-location 决定），导出时希望自动落到与 index.md 同一目录。 尝试与问题 # 1) 命令参数转义与 -lua-filter 误写 # 现象：Pandoc 报 Unknown option -l/-u/-a。 根因：将 --lua-filter 写成了 -lua-filter 或引号转义混乱，导致被拆分为 -l -u -a。 放弃：统一使用 --lua-filter=\u0026quot;...\u0026quot; 或 --lua-filter=...，且在 Windows 下避免多重 \\\\\\\u0026quot; 转义。 2) 过滤器链：先 Hugo 再\u0026quot;打包/改路径\u0026quot; # 最初思路： 先运行 markdown+hugo.lua 以适配 Hugo，再运行自写 bundle.lua 或 index.lua 去复制图片并改写链接。 问题： bundle.lua 复制逻辑可行，但与路径/模板（bundle_target_dir、resource-path）搭配较繁琐。 用户已有图片在同名目录，实际只需\u0026quot;保持同目录 + 改名 index.md\u0026quot;，无需单独复制。 调整： 放弃额外的 bundle.lua；改为在内置的 markdown.lua 中直接处理 Hugo 模式的资源落地策略，减少链路复杂度。 最终方案（核心处理） # A. 修改 lua/markdown.lua（仅对 Hugo 模式） # 目标：将媒体文件复制到与 index.md 同一目录，并在文内改写为相对文件名。\n修改位置：YOUR_OBSIDIAN_VAULT\\.obsidian\\plugins\\obsidian-enhancing-export\\lua\\markdown.lua\n将 Hugo 模式下的 media_dir 改为 doc_dir。\nget_output_file() 在 Hugo 模式使用原始文件名，复制到 media_dir。\n取消对 Hugo 模式 ../ 前缀的拼接。\n关键点：\n媒体目录选择： 原逻辑：若无变量 media_dir，使用 \u0026lt;output_basename\u0026gt;-media（非 Hugo），或为 Hugo 情况构造相对 ../index/... 路径。 现逻辑：若 Mode == 'hugo'，则 media_dir = doc_dir（即输出 index.md 的目录）。 ~lua if PANDOC_STATE.output_file then local output_file = PANDOC_STATE.output_file doc_dir = PATH.directory(output_file) if PANDOC_WRITER_OPTIONS.variables\\[\"media_dir\"\\] then media_dir = tostring(PANDOC_WRITER_OPTIONS.variables\\[\"media_dir\"\\]) else \u0026ndash; 默认策略： \u0026ndash; - Hugo 模式：将媒体文件放在与输出 index.md 相同的目录（叶子 Bundle） \u0026ndash; - 其他模式：使用 \u0026lt;output_basename\u0026gt;-media 目录 if Mode == \u0026lsquo;hugo\u0026rsquo; then media_dir = doc_dir else media_dir = PATH.split_extension(output_file) .. \u0026lsquo;-media\u0026rsquo; end end end ~ 文件名策略： 原逻辑：使用 sha1(file_path) 生成哈希文件名。 现逻辑：Hugo 模式保留原始文件名（basename）。 链接改写： 原逻辑：Hugo 模式常加 ../ 前缀以指向上级 index 子目录。 现逻辑：直接输出复制后的相对路径（通常就是文件名），确保 ![](image.png)。 B. 导出模板（OEE data.json） # 「Markdown (Hugo)」arguments（关键项）： -f ${fromFormat} --resource-path=\u0026#34;${vaultDir}/你的附件位置/${(currentPath.substring(vaultDir.length+1).replace(/\\\\\\\\/g,\u0026#39;/\u0026#39;).replace(/\\\\.[^/.]+$/,\u0026#39;\u0026#39;))}\u0026#34; --lua-filter=\u0026#34;${luaDir}/markdown+hugo.lua\u0026#34; -s -o \u0026#34;${outputDir}/${outputFileName}/index.md\u0026#34; -t commonmark_x-attributes 验证步骤 # 在 OEE 中选择「Markdown (Hugo)」导出。 观察输出：\u0026lt;导出根\u0026gt;/\u0026lt;笔记名\u0026gt;/index.md 与图片位于同一目录。 打开 index.md，确认图片引用为 ![](文件名) 或相对无上级前缀的短路径。 附录：markdown.lua完整代码 # package.path=debug.getinfo(1).source:gsub(\u0026#39;@\u0026#39;,\u0026#39;\u0026#39;):sub(0):match(\u0026#39;(.*[/\\\\])\u0026#39;):sub(0) .. \u0026#39;?.lua\u0026#39; .. \u0026#39;;\u0026#39; .. package.path require(\u0026#34;polyfill\u0026#34;) local url = require(\u0026#39;url\u0026#39;) local pandoc=pandoc local PANDOC_STATE=PANDOC_STATE PANDOC_VERSION:must_be_at_least \u0026#39;3.1.7\u0026#39; os.text = pandoc.text local PATH = pandoc.path local doc_dir = nil local media_dir = nil if Mode == nil then Mode = \u0026#39;default\u0026#39; end -- print(\u0026#34;Mode: \u0026#34;..Mode) if PANDOC_STATE.output_file then local output_file = PANDOC_STATE.output_file doc_dir = PATH.directory(output_file) if PANDOC_WRITER_OPTIONS.variables[\u0026#34;media_dir\u0026#34;] then media_dir = tostring(PANDOC_WRITER_OPTIONS.variables[\u0026#34;media_dir\u0026#34;]) else -- 默认策略： -- - Hugo 模式：将媒体文件放在与输出 index.md 相同的目录（叶子 Bundle） -- - 其他模式：使用 \u0026lt;output_basename\u0026gt;-media 目录 if Mode == \u0026#39;hugo\u0026#39; then media_dir = doc_dir else media_dir = PATH.split_extension(output_file) .. \u0026#39;-media\u0026#39; end end end assert(doc_dir, \u0026#34;doc_dir is nil\u0026#34;) assert(media_dir, \u0026#34;media_dir is nil\u0026#34;) local function get_absolute_path(file_path) if PATH.is_absolute(file_path) then return file_path end for _, dir in pairs(PANDOC_STATE.resource_path) do local full_path = PATH.join({dir, file_path}) if os.exists(full_path) then return full_path end end for _, file in pairs(PANDOC_STATE.input_files) do if not PATH.is_absolute(file) then file = PATH.join({pandoc.system.get_working_directory(), file_path}) end local dir = PATH.directory(file) local full_path = PATH.join({dir, file_path}) if os.exists(full_path) then return full_path end end return nil end local function basename(p) local parts = PATH.split(p) return parts[#parts] end local function get_output_file(file_path) if not media_dir then return nil end if Mode == \u0026#39;hugo\u0026#39; then -- 在 Hugo 模式下，图片与 index.md 放在同一目录且保留原文件名 local name = basename(file_path) return PATH.join({media_dir, name}) else -- 其他模式维持原逻辑，使用哈希文件名并放入 media 目录 local new_file_name = pandoc.utils.sha1(file_path) local _, new_file_ext = PATH.split_extension(file_path) local name = new_file_name .. new_file_ext return PATH.join({media_dir, name}) end end local function extract_media(file_path) os.mkdir(media_dir) file_path = url.decode(file_path) local abs_path = get_absolute_path(file_path) local file = get_output_file(file_path) if abs_path and file then if not os.exists(file) then os.copy(abs_path, file) end local rel_path = PATH.make_relative(file, doc_dir, false) local parts = PATH.split(rel_path) for i,v in ipairs(parts) do parts[i] = url.encode(v) end local encoded_rel_path = table.concat(parts, \u0026#34;/\u0026#34;) -- Hugo 模式下，文件已复制至与 index.md 同目录，直接使用相对文件名/路径 return encoded_rel_path end end local function raw(s) return pandoc.RawInline(\u0026#39;markdown\u0026#39;, s) end function Image(el) local src = extract_media(el.src) if src then el.src = src end return el end function Space() return raw(\u0026#39; \u0026#39;) end function SoftBreak() return raw(\u0026#39;\\n\u0026#39;) end function RawInline(el) if el.format == \u0026#34;html\u0026#34; then el.format = \u0026#39;markdown\u0026#39; el.text = string.gsub(el.text, \u0026#39;\u0026lt;img[^\u0026gt;]+\u0026gt;\u0026#39;, function(img) return string.gsub(img, \u0026#39;src=\u0026#34;([^\u0026#34;]+)\u0026#34;\u0026#39;, function(url) if string.find(url, \u0026#39;^[Hh][Tt][Tt][Pp][Ss]?://\u0026#39;) == nil then local extract_media_url = extract_media(url) if extract_media_url then return \u0026#39;src=\u0026#34;\u0026#39; .. extract_media_url .. \u0026#39;\u0026#34;\u0026#39; end return \u0026#39;123\u0026#39; end return \u0026#39;src=\u0026#34;\u0026#39; .. url .. \u0026#39;\u0026#34;\u0026#39; end) end) end return el end function RawBlock(el) if el.format == \u0026#34;html\u0026#34; then el.format = \u0026#39;markdown\u0026#39; end return el end function Math(el) if Mode == \u0026#39;hugo\u0026#39; then if el.mathtype == \u0026#39;DisplayMath\u0026#39; then return raw(\u0026#39;\\n$$' .. el.text .. '$$\\n\u0026#39;) else el.text = string.gsub(el.text, \u0026#39;\\\\[\\\\{\\\\}]\u0026#39;, function (v) return \u0026#39;\\\\\u0026#39; .. v end) el.text = string.gsub(el.text, \u0026#39;_\u0026#39;, function (v) return \u0026#39;\\\\\u0026#39; .. v end) end end return el end local function headerLink(input) -- github style section link return \u0026#34;#\u0026#34;..input:gsub(\u0026#39; \u0026#39;, \u0026#39;-\u0026#39;) end local function insertLink(content, linkDescription) local descriptionText = table.concat(linkDescription, \u0026#34;\u0026#34;) if string.find(descriptionText, \u0026#39;|\u0026#39;) then local target, desc = descriptionText:match(\u0026#34;(.*)|(.*)\u0026#34;) table.insert(content, pandoc.Link(desc, headerLink(target))) else table.insert(content, pandoc.Link(descriptionText, headerLink(descriptionText))) end end function Para(el) local content = el.content content = ProcessMath(content) content = ProcessInternalLinks(content) el.content = content return el end function ProcessMath(elements) local content = {} local in_display_math = false for _, item in pairs(elements) do if item.t == \u0026#39;Str\u0026#39;and item.text == \u0026#34;$$\u0026#34; then in_display_math = not in_display_math else if in_display_math then if item.t == \u0026#39;RawInline\u0026#39; and item.format == \u0026#39;tex\u0026#39; then local n = pandoc.Math(\u0026#39;DisplayMath\u0026#39;, \u0026#39;\\n\u0026#39; .. item.text .. \u0026#39;\\n\u0026#39;) table.insert(content, Math(n)) else table.insert(content, item) end else table.insert(content, item) end end end return content end function ProcessInternalLinks(elements) local content = {} local in_section_link = false local linkDescription = {} for _, item in pairs(elements) do if item.t == \u0026#39;Str\u0026#39; and string.starts_with(item.text, \u0026#39;[[#\u0026#39;) then in_section_link = true table.insert(linkDescription, string.sub(item.text, 4)) elseif in_section_link then if string.ends_with(item.text, \u0026#39;]]\u0026#39;) then table.insert(linkDescription, string.sub(item.text, 1, -3)) insertLink(content, linkDescription) in_section_link = false linkDescription = {} else table.insert(linkDescription, item.text) end else table.insert(content, item) end end return content end function Plain(el) el.content = ProcessInternalLinks(el.content) return el end function Pandoc(el) return el end ","date":"2025-10-14","externalUrl":null,"permalink":"/posts/hugo-leaf-bundle-export/","section":"文章","summary":"","title":"Obsidian 联动 Hugo 叶页面导出实现记录","type":"posts"},{"content":"","date":"14 10月 2025","externalUrl":null,"permalink":"/en/tags/obsidian-notes/","section":"Tags","summary":"","title":"Obsidian-Notes","type":"tags"},{"content":" Obsidian 增强导出与自定义附件路径兼容问题记录 # 日期：2025-10-15 相关插件： obsidian-enhancing-export（导出增强） obsidian-custom-attachment-location（自定义附件路径） 操作系统：Windows 背景与现象 # 在使用 obsidian-custom-attachment-location 为每篇笔记按模板动态放置附件（例如：./999-工具/assets/${noteFilePath}）的同时，使用 obsidian-enhancing-export 导出（如 Markdown/HTML/PDF），发现导出的图片等资源路径有时无法解析，只有在 Obsidian 设置里\u0026quot;重新设置\u0026quot;一次核心的附件目录后才会临时生效。 复现步骤（摘要） # 在 vault 中启用两个插件： 自定义附件路径插件使用按笔记路径的模板（例如 ./999-工具/assets/${noteFilePath}）。 导出增强插件使用内置的 Pandoc 模板（其中包含 --resource-path=\u0026quot;${currentDir}\u0026quot; 和 --resource-path=\u0026quot;${attachmentFolderPath}\u0026quot;）。 在某篇笔记中插入本地图片（图片实际被保存到自定义附件目录）。 使用导出增强进行导出，图片在导出结果中无法解析（找不到资源）。 根因分析 # 自定义附件路径插件是通过覆写 app.vault.getConfig('attachmentFolderPath') 的 getter，在\u0026quot;读取配置时\u0026quot;动态返回\u0026quot;与当前笔记相关\u0026quot;的附件目录。 导出增强插件在构造导出上下文时，读取的是\u0026quot;静态配置快照\u0026quot;app.vault.config.attachmentFolderPath，没有调用 getter。因此在导出过程中拿到的是固定值，和每篇笔记的动态目录不一致，导致 --resource-path 指向错误。 换言之：应使用 app.vault.getConfig('attachmentFolderPath')（动态）而不是 app.vault.config.attachmentFolderPath（静态）。\n解决方案 # 本次选择\u0026quot;方案 B（无需改代码）\u0026quot;，同时记录\u0026quot;方案 A（最小代码改动）\u0026ldquo;备用。\n方案 A：最小改动（改 1 行，长期正确） # 将导出增强插件里构造导出上下文时的附件目录获取方式改为调用 getter：\n原： let D = Y.attachmentFolderPath ?? \u0026quot;/\u0026quot;; 建议改为： let D = (e.app.vault.getConfig \u0026amp;\u0026amp; e.app.vault.getConfig(\u0026quot;attachmentFolderPath\u0026quot;)) ?? Y.attachmentFolderPath ?? \u0026quot;/\u0026quot;; 这会让导出增强始终读取自定义附件插件提供的\u0026quot;按笔记动态目录\u0026rdquo;。这是最干净的做法，但需要改插件打包后的 main.js，后续升级可能覆盖。\n吐槽：该项目的main.js几乎不可读\n后面为了适配叶页面采用了该修改插件的方案 ### 方案 B：不改代码（在模板里补充一条 resource-path）\n利用导出增强的命令模板支持模板表达式，在 Arguments 中新增一条 --resource-path，直接根据当前笔记路径拼出自定义附件目录。示例（与模板 ./999-工具/assets/${noteFilePath} 对应）：\n在导出增强的\u0026quot;命令模板 → Arguments\u0026quot;中，除了原有的\n--resource-path=\u0026quot;${currentDir}\u0026quot; --resource-path=\u0026quot;${attachmentFolderPath}\u0026quot; 再追加一条（将前缀 999-工具/assets 替换为你自己的规则）：\n--resource-path=\u0026quot;${vaultDir}/999-工具/assets/${(currentPath.substring(vaultDir.length+1).replace(/\\.[^/.]+$/,''))}\u0026quot; 说明：\nvaultDir：库根目录（绝对路径，导出增强会在 Windows 下自动规范为正斜杠）。 currentPath：当前笔记绝对路径（导出增强同样在 Windows 下规范为正斜杠）。 currentPath.substring(vaultDir.length+1)：得到\u0026quot;库内相对路径（含扩展名）\u0026quot;。 replace(/\\.[^/.]+$/,'')：去掉扩展名，等价于 ${noteFilePath}。 多个 --resource-path：Pandoc 会依次搜索，追加的这一条不会影响原有逻辑。 这样组合出的路径等价于自定义附件插件模板生成的目录。 优点：\n无需修改插件文件，插件升级无影响。 可按需为不同导出类型分别添加或调整。 注意：\n如果以后更改了自定义附件插件的目录模板（如前缀或规则），记得同步更新这条 --resource-path。 若附件目录包含空格，已用引号包裹，Pandoc 可正确识别。 ","date":"2025-10-14","externalUrl":null,"permalink":"/posts/obsidian-enhancing-export-custom-attachment-location/","section":"文章","summary":"","title":"Obsidian enhancing-export与custom-attachment-location兼容记录","type":"posts"},{"content":"Listening to the soft sound of breathing works better than any white noise.\n","date":"14 10月 2025","externalUrl":null,"permalink":"/en/posts/pets/","section":"Posts","summary":"","title":"Pets","type":"posts"},{"content":" 压测目的 # 该文档用于评估 MathJax 在当前主题配置下的加载耗时、首屏渲染表现与滚动帧率。内容覆盖了多种数学排版场景，包括大规模对齐环境、嵌套分式、矩阵、化简步骤以及公式表格。\n高密度对齐环境 # \\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\]## 高密度对齐环境\n\\[ \\begin{aligned} R_{xx}(\\tau) \u0026= \\mathbb{E}\\left[x(t)\\, x(t+\\tau)\\right] \\\\[-2pt] S_{xx}(\\omega) \u0026= \\int_{-\\infty}^{\\infty} R_{xx}(\\tau) e^{-j\\omega \\tau} d\\tau \\\\[-2pt] H(j\\omega) \u0026= \\frac{Y(j\\omega)}{X(j\\omega)} = \\frac{\\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt}{1} \\\\[-2pt] \\Phi_{yy}(\\omega) \u0026= |H(j\\omega)|^2 \\Phi_{xx}(\\omega) + \\Phi_{nn}(\\omega) \\end{aligned} \\] 长链推导段落 # 在通信系统噪声分析中，经常需要连续引用多个长公式：\n\\[ \\begin{aligned} P_e \u0026= Q\\!\\left(\\sqrt{\\frac{2E_b}{N_0}}\\right) = \\frac{1}{\\sqrt{2\\pi}} \\int_{\\sqrt{2E_b/N_0}}^{\\infty} e^{-u^2/2} du, \\\\ G(s) \u0026= \\sum_{k=0}^{\\infty} p_k e^{-skT_s}, \\\\ I \u0026= \\int_{0}^{1} \\frac{\\ln(1+x)}{x} dx = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{1}{n^2}. \\end{aligned} \\]为了形成高密度压力，本段落重复引用相同公式： \\( Q(x) = \\tfrac{1}{2}\\operatorname{erfc}\\left(\\tfrac{x}{\\sqrt{2}}\\right),\\ \\nabla^2 = \\partial_{xx} + \\partial_{yy} + \\partial_{zz},\\ E\\left\\{e^{sX}\\right\\} = \\int_{-\\infty}^{\\infty} e^{sx} f_X(x) dx \\)，用于检测内联渲染的基线性能。\n大型矩阵与行列式 # [ \\mathbf{A} = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; \\dots \u0026amp; 0 \\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; \\dots \u0026amp; 1 \\\na_0 \u0026amp; - a_1 \u0026amp; - a_2 \u0026amp; \\dots \u0026amp; - a_{n-1} \\end{bmatrix} ] \\[ \\det(\\mathbf{A}-\\lambda \\mathbf{I}) = \\lambda^n + a_{n-1} \\lambda^{n-1} + \\cdots + a_1 \\lambda + a_0 \\] 表格批量渲染 # 序号 公式类型 示例 1 贝塞尔函数 \\( J_n(x) = \\sum_{m=0}^{\\infty} (-1)^m \\frac{(x/2)^{2m+n}}{m!\\,(m+n)!} \\) 2 复频谱 \\( X(j\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt \\) 3 路径积分 \\( \\oint_{\\gamma} f(z) dz = 2\\pi i \\sum \\operatorname{Res}(f, a_k) \\) 4 线性估计 \\( \\hat{x} = \\mathbf{w}^T \\mathbf{y} = \\sum_{k=1}^{N} w_k y_k \\) 5 香农容量 \\( C = B \\log_2\\left(1+\\frac{S}{N}\\right) \\) 滚动段落连续负载 # 我们通过一个长段落复制常见的积分与和式来模拟真实论文的滚动压力。下式重复嵌套多层结构，方便观测滚动过程中 MathJax 的重新排版开销：\n\\[ \\sum_{k=1}^{K} \\int_{0}^{T} \\left| \\frac{1}{T} \\int_{0}^{T} \\left( x_k(t) - \\sum_{m=1}^{M} \\alpha_{km} \\phi_m(t) \\right) e^{-j2\\pi ft} dt \\right|^2 dt \\]\\[ S_n = \\sum_{k=1}^{n} \\frac{1}{k} = \\ln n + \\gamma + \\frac{1}{2n} - \\frac{1}{12n^2} + O\\!\\left(\\frac{1}{n^4}\\right) \\] 多级对齐与算子级联 # 为了进一步增加渲染压力，加入多级对齐环境、偏导数与算子链式法则：\n\\[ \\begin{aligned} \\frac{\\partial}{\\partial t} \\int_{\\Omega(t)} f(x,t) \\, dx \u0026= \\int_{\\Omega(t)} \\frac{\\partial f}{\\partial t}(x,t) \\, dx + \\int_{\\partial \\Omega(t)} f(x,t) \\; \\mathbf{v}(x,t) \\cdot \\mathbf{n}(x,t) \\, dS, \\\\ \\nabla_{\\mathbf{x}} (\\mathbf{A}(\\mathbf{x}) \\mathbf{B}(\\mathbf{x})) \u0026= (\\nabla_{\\mathbf{x}} \\mathbf{A}) \\mathbf{B} + \\mathbf{A} (\\nabla_{\\mathbf{x}} \\mathbf{B}), \\\\ \\mathrm{div}\\,(\\mathrm{curl}\\, \\mathbf{F}) \u0026= 0, \\qquad \\mathrm{curl}\\,(\\nabla \\phi) = \\mathbf{0}. \\end{aligned} \\]\\[ \\begin{aligned} \\mathbf{J}(\\theta) \u0026= \\mathbb{E}\\bigg[ \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right) \\left( \\frac{\\partial}{\\partial \\theta} \\log p(X;\\theta) \\right)^{\\!T} \\bigg], \\\\ \\mathcal{I}(\\theta) \u0026= - \\mathbb{E}\\left[ \\frac{\\partial^2}{\\partial \\theta^2} \\log p(X;\\theta) \\right], \\qquad \\mathcal{I}(\\theta) = \\mathbf{J}(\\theta). \\end{aligned} \\] 大型张量与特殊函数 # \\[ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} \\int_{\\mathbb{R}^3} \\int_{0}^{2\\pi} r^2 \\sin \\phi \\; Y_{im}(\\theta,\\phi) \\, Y_{mj}(\\theta,\\phi) \\, Z_{mk}(r) \\, dr \\, d\\theta \\, d\\phi \\]\\[ \\begin{aligned} \\mathcal{H}_{\\nu}^{(1)}(z) \u0026= J_{\\nu}(z) + i Y_{\\nu}(z), \\\\ E_{\\alpha,\\beta}(z) \u0026= \\sum_{k=0}^{\\infty} \\frac{z^k}{\\Gamma(\\alpha k + \\beta)}, \\\\ {}_pF_q(a_1,\\ldots,a_p; b_1,\\ldots,b_q; z) \u0026= \\sum_{n=0}^{\\infty} \\frac{(a_1)_n \\cdots (a_p)_n}{(b_1)_n \\cdots (b_q)_n} \\frac{z^n}{n!}. \\end{aligned} \\] 级数与生成函数扩展 # \\[ \\log \\Gamma(z) = \\left(z - \\tfrac{1}{2}\\right) \\log z - z + \\tfrac{1}{2} \\log(2\\pi) + \\sum_{k=1}^{\\infty} \\frac{B_{2k}}{2k (2k-1) z^{2k-1}} \\]\\[ G(t) = \\prod_{n=1}^{\\infty} (1 - t^n)^{-1} = \\sum_{k=0}^{\\infty} p(k) t^k, \\qquad p(k) \\text{ 为分拆数} \\]\\[ \\sum_{n=0}^{\\infty} \\frac{H_n}{n!} x^n = e^x \\int_{0}^{x} \\frac{1 - e^{-u}}{u} du, \\qquad H_n = 1 + \\frac{1}{2} + \\cdots + \\frac{1}{n} \\] 结论 # 当页面包含上述规模的公式时，可以通过浏览器性能工具记录首次内容绘制、脚本执行时间与滚动 FPS，以量化 MathJax 在站点中的表现差异。\n","date":"2025-10-14","externalUrl":null,"permalink":"/posts/mathjax%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/","section":"文章","summary":"","title":"MathJax 渲染性能压力测试","type":"posts"},{"content":"","date":"2025-10-14","externalUrl":null,"permalink":"/tags/%E5%85%AC%E5%BC%8F/","section":"标签","summary":"","title":"公式","type":"tags"},{"content":"","date":"2025-10-14","externalUrl":null,"permalink":"/tags/%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95/","section":"标签","summary":"","title":"工具测试","type":"tags"},{"content":"","date":"2025-10-14","externalUrl":null,"permalink":"/tags/%E6%80%A7%E8%83%BD/","section":"标签","summary":"","title":"性能","type":"tags"},{"content":" 场景说明 # 本文用于验证在高密度数学公式场景下，KaTeX 渲染在浏览器中的性能表现。我们通过构造大量的内联、块级、矩阵、求和与积分表达式，模拟真正的数理统计或通信理论类文章。\n内联公式压力段 # 要在单段落中穿插足够多的内联表达式，我们使用黄金分割数 \\(\\varphi = \\dfrac{1+\\sqrt5}{2}\\)、二项式公式 \\((a+b)^n = \\sum_{k=0}^{n} {n \\choose k} a^{n-k} b^k\\)、误码率近似式 \\(P_e \\approx Q\\!\\left(\\sqrt{2E_b/N_0}\\right)\\)、指数母函数 \\(G_X(s) = \\mathbb{E}[e^{sX}]\\)、热传导方程 \\(u_t = \\kappa u_{xx}\\)、伯努利试验概率 \\(P(k) = {n \\choose k} p^k (1-p)^{n-k}\\)、傅里叶级数系数 \\(a_n = \\tfrac{2}{T} \\int_0^T f(t) \\cos (n\\omega_0 t) \\, dt\\) 等典型表达式。请注意阅读时页面需要一次性渲染十多个公式，以测试解析阶段的 CPU 占用情况。\n块级大量公式 # 为了模拟教材中的推导，我们准备了多个连续的块级表达式：\n$$ \\mathcal{L}\\{f(t)\\} = \\int_0^{\\infty} f(t) e^{-st} dt $$$$ \\mathbf{F}(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} dt $$$$ \\nabla^2 \\Phi = \\frac{\\partial^2 \\Phi}{\\partial x^2} + \\frac{\\partial^2 \\Phi}{\\partial y^2} + \\frac{\\partial^2 \\Phi}{\\partial z^2} $$$$ \\vec{E}(r,t) = \\frac{1}{4\\pi \\varepsilon_0} \\int_V \\frac{\\rho(r',t_r)}{|r-r'|^3} (r-r')\\, dV' $$$$ Z(s) = R + sL + \\frac{1}{sC} $$连续五个块级公式常用于检测页面回流行为以及字体渲染是否存在闪烁。\n列表与矩阵组合 # 信号空间基向量： $$ \\mathbf{u}_i(t) = \\begin{cases} \\sqrt{\\frac{2}{T}} \\cos \\left(\\frac{(2i-1)\\pi t}{2T}\\right), \u0026 0 \\le t \\le T \\\\ 0, \u0026 \\text{otherwise} \\end{cases} $$ 高斯协方差矩阵： $$ \\Sigma = \\begin{bmatrix} \\sigma_1^2 \u0026 \\rho_{12} \\sigma_1 \\sigma_2 \u0026 \\dots \u0026 \\rho_{1n} \\sigma_1 \\sigma_n \\\\ \\rho_{21} \\sigma_2 \\sigma_1 \u0026 \\sigma_2^2 \u0026 \\dots \u0026 \\rho_{2n} \\sigma_2 \\sigma_n \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ \\rho_{n1} \\sigma_n \\sigma_1 \u0026 \\rho_{n2} \\sigma_n \\sigma_2 \u0026 \\dots \u0026 \\sigma_n^2 \\end{bmatrix} $$ 正交多项式递推： $$ P_{n+1}(x) = (A_n x + B_n) P_n(x) - C_n P_{n-1}(x) $$ 大型求和与积分串联 # 连续求和与积分能够检验长公式下的折行和滚动性能：\n$$ \\sum_{k=1}^{N} \\sum_{m=1}^{M} \\left|\\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} x_{k,m}(\\omega) e^{j\\omega (k+m)} d\\omega \\right|^2 $$$$ I(\\alpha,\\beta) = \\int_{0}^{1} x^{\\alpha-1} (1-x)^{\\beta-1} \\, _2F_1\\left(a,b;c; x\\right) dx $$$$ J(n) = \\sum_{k=0}^{\\infty} (-1)^k \\frac{\\Gamma(k+n)}{k!\\, \\Gamma(n)} e^{-\\lambda k} $$ 复合张量与算子压力段 # 下面增加多层嵌套的张量、行列式与算子，测试 KaTeX 在复杂结构下的重排表现：\n$$ \\mathbf{T}_{ijk} = \\sum_{m=1}^{M} R_{im} S_{mj} Q_{mk} = \\sum_{m=1}^{M} \\left( \\int_{\\Omega} \\phi_i(x) \\psi_m(x) dx \\right) \\left( \\oint_{\\Gamma} u_m(y) v_j(y) dy \\right) \\left( \\frac{\\partial^2 w_m(z)}{\\partial z^2} \\bigg|_{z=k} \\right) $$$$ \\det\\!\\begin{bmatrix} \\lambda \u0026 1 \u0026 0 \u0026 \\dots \u0026 0 \\\\ \\mu_1 \u0026 \\lambda \u0026 1 \u0026 \\dots \u0026 0 \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\ddots \u0026 \\vdots \\\\ 0 \u0026 0 \u0026 \\dots \u0026 \\lambda \u0026 1 \\\\ (-1)^{n-1} \\prod_{i=1}^{n-1} c_i \u0026 0 \u0026 \\dots \u0026 0 \u0026 \\lambda \\end{bmatrix} = \\lambda^n + \\sum_{k=1}^{n} (-1)^k e_k(c_1,\\ldots,c_n) \\lambda^{n-k} $$$$ \\begin{aligned} \\mathcal{F}\\{ \\nabla^2 f \\}(\\omega) \u0026= -\\|\\omega\\|^2 F(\\omega), \\\\ \\mathcal{F}^{-1}\\{ \\|\\omega\\|^{-2} F(\\omega) \\}(x) \u0026= \\int_{\\mathbb{R}^n} \\frac{F(\\omega)}{\\|\\omega\\|^2} e^{j\\omega^T x} d\\omega, \\\\ \\mathbf{curl}\\,(\\mathbf{curl}\\, \\mathbf{A}) \u0026= \\nabla(\\nabla \\cdot \\mathbf{A}) - \\nabla^2 \\mathbf{A}. \\end{aligned} $$ 级数展开与特殊函数 # 在同一节内给出多个级数展开与特殊函数表达式，施压到符号解析阶段：\n$$ \\log(1+x) = \\sum_{n=1}^{\\infty} (-1)^{n-1} \\frac{x^n}{n}, \\quad |x| \u003c 1 $$$$ \\operatorname{Li}_s(z) = \\sum_{k=1}^{\\infty} \\frac{z^k}{k^s}, \\qquad B_n = -n \\sum_{k=1}^{n} \\frac{\\zeta(1-k)}{k} {n-1 \\choose k-1} $$$$ H_n^{(r)} = \\sum_{k=1}^{n} \\frac{1}{k^r}, \\qquad E_n(x) = \\sum_{k=0}^{n} {n \\choose k} E_k x^{n-k} $$ 结论 # 当页面出现类似规模的公式密度时，可观察初次渲染时间、滚动时的帧率以及交互延迟，从而评估 KaTeX 在当前主题与浏览器组合下的表现。\n","date":"2025-10-14","externalUrl":null,"permalink":"/posts/katex%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/","section":"文章","summary":"","title":"KaTeX 渲染性能压力测试","type":"posts"},{"content":"假装这里有一份 arinp 的简介。\n","externalUrl":null,"permalink":"/authors/arinp/","section":"作者列","summary":"","title":"arinp","type":"authors"},{"content":" ","externalUrl":null,"permalink":"/ja/","section":"Asaniloのブログへようこそ！ 🎉","summary":"","title":"Asaniloのブログへようこそ！ 🎉","type":"page"},{"content":"","externalUrl":null,"permalink":"/ja/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/ja/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" 手をつないで、想像のままどこへだって駆け出そう。 ","externalUrl":null,"permalink":"/ja/categories/gaming/","section":"Categories","summary":"","title":"ゲーム","type":"categories"},{"content":"Blowfish は Hugo の分類システムを完全にサポートし、どのような分類システムの設定でも適合できます。このような分類システムのリストは、用語リストの上に表示されるカスタムコンテンツもサポートしています。\nこのエリアはそれぞれの分類システムに追加の説明をする時に利用します。以下の高度なタグを確認して、このコンセプトをさらに発展させる方法をご覧ください。\n","externalUrl":null,"permalink":"/ja/tags/","section":"タグ","summary":"","title":"タグ","type":"tags"},{"content":" インスピレーションには形になるまで熟成する時間が必要だ……。 ","externalUrl":null,"permalink":"/ja/categories/designs/","section":"Categories","summary":"","title":"デザイン","type":"categories"},{"content":" 着実に進行中。次の一歩をどうぞお楽しみに。 ","externalUrl":null,"permalink":"/ja/categories/projects/","section":"Categories","summary":"","title":"プロジェクト","type":"categories"},{"content":" 風のささやきに耳を澄ませて……。 ","externalUrl":null,"permalink":"/ja/categories/music/","section":"Categories","summary":"","title":"音楽","type":"categories"},{"content":"これは「概要」ページです。ここにあなた自身について何か書くことができます。\n","externalUrl":null,"permalink":"/ja/about/","section":"概要","summary":"","title":"概要","type":"about"},{"content":" 知識の海を探検し、智慧の養分を汲み取ろう。 ","externalUrl":null,"permalink":"/ja/categories/learning/","section":"Categories","summary":"","title":"学習","type":"categories"},{"content":" Asaniloの脳内キャッシュ、技術情報、学習記録、そして時々つぶやき。 ","externalUrl":null,"permalink":"/ja/posts/","section":"記事","summary":"","title":"記事","type":"posts"},{"content":"こちらは高度なタグです。 Blowfish の他のページの様に、個々の分類条項にカスタムコンテンツの追加やそれを条項リストの一番上に表示することが可能です。\u0026#x1f680;\nタイトルや説明など SEO や他の目的に利用するためのHugo のメタデータを定義するためにこれらのコンテンツページも利用可能です。\n","externalUrl":null,"permalink":"/ja/tags/advanced/","section":"タグ","summary":"","title":"高度なタグ","type":"tags"},{"content":" 私の光と影、そして光と闇の狭間で揺らめく言葉たち。 ","externalUrl":null,"permalink":"/ja/categories/essays/","section":"Categories","summary":"","title":"随筆","type":"categories"},{"content":"","externalUrl":null,"permalink":"/ja/authors/","section":"著者のタクソノミーリスト","summary":"","title":"著者のタクソノミーリスト","type":"authors"}]